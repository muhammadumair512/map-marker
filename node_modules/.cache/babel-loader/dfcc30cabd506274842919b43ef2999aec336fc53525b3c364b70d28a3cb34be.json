{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CREATIVE_SOLUTIONS\\\\Desktop\\\\bolt\\\\bolt codesandbox\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// perfectly working filter and proper showing of points but download doesnot woork as expected\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Tooltip, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Papa from \"papaparse\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { point, polygon } from \"@turf/helpers\";\nimport * as XLSX from \"xlsx\";\n\n// Custom icons\nimport CustomMarkerIconImage from \"./custom-marker.png\";\nimport DotIconImage from \"./small-dot.png\";\n\n// Marker icons\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomMarkerIcon = L.icon({\n  iconUrl: CustomMarkerIconImage,\n  iconSize: [30, 40],\n  iconAnchor: [15, 40],\n  popupAnchor: [0, -40]\n});\nconst DotIcon = L.icon({\n  iconUrl: DotIconImage,\n  iconSize: [10, 10],\n  iconAnchor: [5, 5]\n});\n\n// ZipOverlay Component to display ZIP codes\nfunction ZipOverlay() {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    const url = \"https://raw.githubusercontent.com/OpenDataDE/State-zip-code-GeoJSON/master/pa_pennsylvania_zip_codes_geo.min.json\";\n    fetch(url).then(res => res.json()).then(geoData => {\n      const layer = L.geoJSON(geoData, {\n        style: {\n          color: \"#ff7800\",\n          weight: 1,\n          fillColor: \"#ffeda0\",\n          fillOpacity: 0.4\n        },\n        onEachFeature: (feature, layerInstance) => {\n          const zip = feature.properties.ZCTA5CE10 || \"Unknown ZIP\";\n          layerInstance.bindPopup(\"ZIP Code: \".concat(zip));\n        }\n      });\n      layer.addTo(map);\n    }).catch(err => console.error(\"Error fetching ZIP code GeoJSON:\", err));\n  }, [map]);\n  return null;\n}\n\n// DrawHandler Component to handle shape drawings\n\n// Main App Component\n_s(ZipOverlay, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = ZipOverlay;\nfunction App() {\n  _s3();\n  var _s2 = $RefreshSig$();\n  // Master data lists\n  const [locations, setLocations] = useState([]); // From Main CSV\n  const [pricingData, setPricingData] = useState([]); // From Pricing CSV\n\n  // Filtered data lists\n  const [shapeFilteredData, setShapeFilteredData] = useState([]); // Data within drawn shape\n  const [acreageFilteredData, setAcreageFilteredData] = useState([]); // Data within acreage range\n\n  // Displayed data after applying all filters\n  const [displayedPricingData, setDisplayedPricingData] = useState([]);\n\n  // Acreage filter inputs\n  const [minAcreage, setMinAcreage] = useState(\"\");\n  const [maxAcreage, setMaxAcreage] = useState(\"\");\n  const mapRef = useRef(null);\n\n  // Effect to compute displayedPricingData whenever filters change\n  useEffect(() => {\n    let filtered = pricingData;\n\n    // Apply shape filter if any\n    if (shapeFilteredData.length > 0) {\n      const shapeAPNs = new Set(shapeFilteredData.map(item => item.apn));\n      filtered = filtered.filter(item => shapeAPNs.has(item.apn));\n    }\n\n    // Apply acreage filter if set\n    if (acreageFilteredData.length > 0) {\n      const acreageAPNs = new Set(acreageFilteredData.map(item => item.apn));\n      filtered = filtered.filter(item => acreageAPNs.has(item.apn));\n    }\n    setDisplayedPricingData(filtered);\n  }, [shapeFilteredData, acreageFilteredData, pricingData]);\n\n  // Handler for uploading Main CSV\n  const handleMainCSVUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        const parsedData = results.data.filter(row => {\n          const lat = parseFloat(row.LATITUDE);\n          const lng = parseFloat(row.LONGITUDE);\n          return Number.isFinite(lat) && Number.isFinite(lng);\n        }).map(row => ({\n          coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n          details: row\n        }));\n        setLocations(parsedData);\n      },\n      error: err => console.error(\"PapaParse Error (Main CSV):\", err)\n    });\n  };\n\n  // Handler for uploading Pricing CSV\n  const handlePricingCSVUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      chunkSize: 500,\n      chunk: results => {\n        const chunkData = results.data.filter(row => {\n          const lat = parseFloat(row.LATITUDE);\n          const lng = parseFloat(row.LONGITUDE);\n          return Number.isFinite(lat) && Number.isFinite(lng) && row[\"APN - FORMATTED\"];\n        }).map(row => ({\n          apn: row[\"APN - FORMATTED\"],\n          coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n          lotAcreage: row[\"LOT ACREAGE\"] ? parseFloat(row[\"LOT ACREAGE\"]) : null\n        }));\n        setPricingData(prev => {\n          const updated = [...prev, ...chunkData];\n          return updated;\n        });\n      },\n      complete: () => console.log(\"Pricing CSV parsing complete!\"),\n      error: err => console.error(\"PapaParse Error (Pricing CSV):\", err)\n    });\n  };\n  function DrawHandler(_ref) {\n    _s2();\n    let {\n      pricingData,\n      locations,\n      setShapeFilteredData\n    } = _ref;\n    const map = useMap();\n    const [controlAdded, setControlAdded] = useState(false);\n\n    // Function to check if a point is within the drawn shape\n    const isPointInShape = (lat, lng, layer) => {\n      if (layer instanceof L.Circle || layer instanceof L.CircleMarker) {\n        const center = layer.getLatLng();\n        const radius = layer.getRadius();\n        return map.distance(center, L.latLng(lat, lng)) <= radius;\n      } else {\n        const shapeGeoJSON = layer.toGeoJSON();\n        const polygonGeometry = polygon(shapeGeoJSON.geometry.coordinates);\n        return booleanPointInPolygon(point([lng, lat]), polygonGeometry);\n      }\n    };\n\n    // Function to handle data filtering when a shape is drawn\n    const handleShapeDrawn = layer => {\n      const filteredPricing = pricingData.filter(p => {\n        const [lat, lng] = p.coords;\n        return isPointInShape(lat, lng, layer);\n      });\n      const filteredComps = locations.filter(loc => {\n        const [lat, lng] = loc.coords;\n        return isPointInShape(lat, lng, layer);\n      });\n      const combinedData = [...filteredPricing.map(item => ({\n        type: \"pricing\",\n        apn: item.apn,\n        lotAcreage: item.lotAcreage,\n        latitude: item.coords[0],\n        longitude: item.coords[1]\n      })), ...filteredComps.map(item => ({\n        type: \"comps\",\n        price: item.details.PRICE,\n        acres: item.details.ACRES,\n        latitude: item.coords[0],\n        longitude: item.coords[1]\n      }))];\n      setShapeFilteredData(combinedData);\n    };\n\n    // Initialize drawing controls once\n    useEffect(() => {\n      if (!controlAdded) {\n        const drawnItems = new L.FeatureGroup();\n        map.addLayer(drawnItems);\n        const drawControl = new L.Control.Draw({\n          draw: {\n            marker: false,\n            polyline: false,\n            circle: {\n              shapeOptions: {\n                color: \"#ff0000\"\n              },\n              showRadius: true\n            },\n            circlemarker: {\n              shapeOptions: {\n                color: \"#ff0000\"\n              }\n            },\n            polygon: {\n              shapeOptions: {\n                color: \"#0000ff\"\n              },\n              showArea: true\n            },\n            rectangle: {\n              shapeOptions: {\n                color: \"#00ff00\"\n              }\n            }\n          },\n          edit: {\n            featureGroup: drawnItems\n          }\n        });\n        map.addControl(drawControl);\n        setControlAdded(true);\n        map.on(\"draw:created\", e => {\n          const {\n            layer\n          } = e;\n          drawnItems.addLayer(layer);\n          handleShapeDrawn(layer);\n        });\n      }\n    }, [map, controlAdded, pricingData, locations, setShapeFilteredData]);\n    return null;\n  }\n  // Handler for applying acreage filter\n  _s2(DrawHandler, \"hwbgWOkN5teoty/Wul8Dw6LkzlM=\", false, function () {\n    return [useMap];\n  });\n  const applyAcreageFilter = () => {\n    const minVal = parseFloat(minAcreage);\n    const maxVal = parseFloat(maxAcreage);\n    if (isNaN(minVal) || isNaN(maxVal)) {\n      alert(\"Please enter valid numeric values for both min and max acreage.\");\n      return;\n    }\n    const filtered = pricingData.filter(pd => {\n      if (pd.lotAcreage == null) return false;\n      return pd.lotAcreage >= minVal && pd.lotAcreage <= maxVal;\n    });\n    setAcreageFilteredData(filtered);\n  };\n\n  // Handler for clearing all filters\n  const clearFilters = () => {\n    setShapeFilteredData([]);\n    setAcreageFilteredData([]);\n    setMinAcreage(\"\");\n    setMaxAcreage(\"\");\n  };\n\n  // Handler for downloading filtered data and removing them from the map\n  const downloadFilteredDataToExcel = () => {\n    if (displayedPricingData.length === 0) {\n      alert(\"No data points to download.\");\n      return;\n    }\n\n    // Prepare data for export\n\n    const pricingDataTab = displayedPricingData.map(item => ({\n      APN: item.apn,\n      \"LOT ACREAGE\": item.lotAcreage,\n      Latitude: item.coords ? item.coords[0] : item.latitude,\n      Longitude: item.coords ? item.coords[1] : item.longitude\n    }));\n\n    // Create and download Excel file\n    const workbook = XLSX.utils.book_new();\n    const pricingSheet = XLSX.utils.json_to_sheet(pricingDataTab);\n    XLSX.utils.book_append_sheet(workbook, pricingSheet, \"Pricing Data\");\n    XLSX.writeFile(workbook, \"filtered_data.xlsx\");\n\n    // Identify APNs of exported points for removal\n    const exportedAPNs = new Set(displayedPricingData.map(item => item.apn));\n\n    // Remove exported points from locations and pricingData states\n    setLocations(prev => prev.filter(loc => !exportedAPNs.has(loc.details[\"APN - FORMATTED\"])));\n    setPricingData(prev => prev.filter(pt => !exportedAPNs.has(pt.apn)));\n\n    // Clear filtered data\n    setShapeFilteredData([]);\n    setAcreageFilteredData([]);\n    setDisplayedPricingData([]);\n    alert(\"Filtered data downloaded and removed from the map.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100%\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        zIndex: 1000,\n        top: 10,\n        right: 10,\n        background: \"#f8f9fa\",\n        padding: \"12px 15px\",\n        borderRadius: \"8px\",\n        boxShadow: \"0 3px 8px rgba(0,0,0,0.15)\",\n        width: \"280px\",\n        fontFamily: \"Arial, sans-serif\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: 0,\n          marginBottom: \"10px\"\n        },\n        children: \"Data Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"15px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: \"block\",\n            fontWeight: \"bold\"\n          },\n          children: \"Upload Main CSV:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          onChange: handleMainCSVUpload,\n          style: {\n            width: \"100%\",\n            marginTop: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"15px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: \"block\",\n            fontWeight: \"bold\"\n          },\n          children: \"Upload Pricing CSV:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          onChange: handlePricingCSVUpload,\n          style: {\n            width: \"100%\",\n            marginTop: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"15px\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"6px\",\n          padding: \"8px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            fontWeight: \"bold\"\n          },\n          children: \"Acreage Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 368,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"8px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min Acreage:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 370,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: minAcreage,\n            onChange: e => setMinAcreage(e.target.value),\n            style: {\n              width: \"60px\",\n              marginLeft: \"10px\",\n              marginRight: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max Acreage:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 377,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: maxAcreage,\n            onChange: e => setMaxAcreage(e.target.value),\n            style: {\n              width: \"60px\",\n              marginLeft: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 378,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 369,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: applyAcreageFilter,\n          style: {\n            marginTop: \"10px\",\n            padding: \"6px 12px\",\n            background: \"#17a2b8\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\"\n          },\n          children: \"Apply Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 385,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearFilters,\n          style: {\n            marginTop: \"10px\",\n            marginLeft: \"10px\",\n            padding: \"6px 12px\",\n            background: \"#6c757d\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\"\n          },\n          children: \"Clear Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 360,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadFilteredDataToExcel,\n        style: {\n          marginTop: \"5px\",\n          padding: \"8px 12px\",\n          background: \"#007bff\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\",\n          width: \"100%\"\n        },\n        children: \"Download Filtered Data (Excel)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 417,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [41.2033, -77.1945],\n      zoom: 7,\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      },\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 441,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ZipOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 447,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DrawHandler, {\n        pricingData: pricingData,\n        locations: locations,\n        setShapeFilteredData: setShapeFilteredData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), locations.filter(loc => Number.isFinite(loc.coords[0]) && Number.isFinite(loc.coords[1])).map((loc, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: loc.coords,\n        icon: CustomMarkerIcon,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          direction: \"top\",\n          offset: [0, -10],\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"left\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"PRICE:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 466,\n              columnNumber: 19\n            }, this), \" \", loc.details.PRICE, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 467,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"ACRES:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 468,\n              columnNumber: 19\n            }, this), \" \", loc.details.ACRES]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 465,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 464,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 13\n      }, this)), displayedPricingData.filter(item => item.coords && Number.isFinite(item.coords[0]) && Number.isFinite(item.coords[1]) || Number.isFinite(item.latitude) && Number.isFinite(item.longitude)).map((point, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: point.coords && Number.isFinite(point.coords[0]) && Number.isFinite(point.coords[1]) ? point.coords : [point.latitude, point.longitude],\n        icon: DotIcon,\n        children: point.lotAcreage !== null && /*#__PURE__*/_jsxDEV(Tooltip, {\n          direction: \"top\",\n          offset: [0, -10],\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"LOT ACREAGE:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 498,\n              columnNumber: 21\n            }, this), \" \", point.lotAcreage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 497,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 484,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 315,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"69x+gDvyGjV85BmJ8II23Q48Yw0=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ZipOverlay\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MapContainer","TileLayer","Marker","Tooltip","useMap","Papa","L","booleanPointInPolygon","point","polygon","XLSX","CustomMarkerIconImage","DotIconImage","jsxDEV","_jsxDEV","CustomMarkerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","DotIcon","ZipOverlay","_s","map","url","fetch","then","res","json","geoData","layer","geoJSON","style","color","weight","fillColor","fillOpacity","onEachFeature","feature","layerInstance","zip","properties","ZCTA5CE10","bindPopup","concat","addTo","catch","err","console","error","_c","App","_s3","_s2","$RefreshSig$","locations","setLocations","pricingData","setPricingData","shapeFilteredData","setShapeFilteredData","acreageFilteredData","setAcreageFilteredData","displayedPricingData","setDisplayedPricingData","minAcreage","setMinAcreage","maxAcreage","setMaxAcreage","mapRef","filtered","length","shapeAPNs","Set","item","apn","filter","has","acreageAPNs","handleMainCSVUpload","event","file","target","files","parse","header","skipEmptyLines","complete","results","parsedData","data","row","lat","parseFloat","LATITUDE","lng","LONGITUDE","Number","isFinite","coords","details","handlePricingCSVUpload","chunkSize","chunk","chunkData","lotAcreage","prev","updated","log","DrawHandler","_ref","controlAdded","setControlAdded","isPointInShape","Circle","CircleMarker","center","getLatLng","radius","getRadius","distance","latLng","shapeGeoJSON","toGeoJSON","polygonGeometry","geometry","coordinates","handleShapeDrawn","filteredPricing","p","filteredComps","loc","combinedData","type","latitude","longitude","price","PRICE","acres","ACRES","drawnItems","FeatureGroup","addLayer","drawControl","Control","Draw","draw","marker","polyline","circle","shapeOptions","showRadius","circlemarker","showArea","rectangle","edit","featureGroup","addControl","on","e","applyAcreageFilter","minVal","maxVal","isNaN","alert","pd","clearFilters","downloadFilteredDataToExcel","pricingDataTab","APN","Latitude","Longitude","workbook","utils","book_new","pricingSheet","json_to_sheet","book_append_sheet","writeFile","exportedAPNs","pt","height","width","position","children","zIndex","top","right","background","padding","borderRadius","boxShadow","fontFamily","marginTop","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","fontWeight","accept","onChange","border","value","marginLeft","marginRight","onClick","cursor","zoom","ref","attribution","index","direction","offset","textAlign","_c2","$RefreshReg$"],"sources":["C:/Users/CREATIVE_SOLUTIONS/Desktop/bolt/bolt codesandbox/src/App.js"],"sourcesContent":["// perfectly working filter and proper showing of points but download doesnot woork as expected\nimport React, { useState, useRef, useEffect } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Tooltip,\n  useMap,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Papa from \"papaparse\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { point, polygon } from \"@turf/helpers\";\nimport * as XLSX from \"xlsx\";\n\n// Custom icons\nimport CustomMarkerIconImage from \"./custom-marker.png\";\nimport DotIconImage from \"./small-dot.png\";\n\n// Marker icons\nconst CustomMarkerIcon = L.icon({\n  iconUrl: CustomMarkerIconImage,\n  iconSize: [30, 40],\n  iconAnchor: [15, 40],\n  popupAnchor: [0, -40],\n});\nconst DotIcon = L.icon({\n  iconUrl: DotIconImage,\n  iconSize: [10, 10],\n  iconAnchor: [5, 5],\n});\n\n// ZipOverlay Component to display ZIP codes\nfunction ZipOverlay() {\n  const map = useMap();\n  useEffect(() => {\n    const url =\n      \"https://raw.githubusercontent.com/OpenDataDE/State-zip-code-GeoJSON/master/pa_pennsylvania_zip_codes_geo.min.json\";\n    fetch(url)\n      .then((res) => res.json())\n      .then((geoData) => {\n        const layer = L.geoJSON(geoData, {\n          style: {\n            color: \"#ff7800\",\n            weight: 1,\n            fillColor: \"#ffeda0\",\n            fillOpacity: 0.4,\n          },\n          onEachFeature: (feature, layerInstance) => {\n            const zip = feature.properties.ZCTA5CE10 || \"Unknown ZIP\";\n            layerInstance.bindPopup(`ZIP Code: ${zip}`);\n          },\n        });\n        layer.addTo(map);\n      })\n      .catch((err) => console.error(\"Error fetching ZIP code GeoJSON:\", err));\n  }, [map]);\n  return null;\n}\n\n// DrawHandler Component to handle shape drawings\n\n\n// Main App Component\nfunction App() {\n  // Master data lists\n  const [locations, setLocations] = useState([]); // From Main CSV\n  const [pricingData, setPricingData] = useState([]); // From Pricing CSV\n\n  // Filtered data lists\n  const [shapeFilteredData, setShapeFilteredData] = useState([]); // Data within drawn shape\n  const [acreageFilteredData, setAcreageFilteredData] = useState([]); // Data within acreage range\n\n  // Displayed data after applying all filters\n  const [displayedPricingData, setDisplayedPricingData] = useState([]);\n\n  // Acreage filter inputs\n  const [minAcreage, setMinAcreage] = useState(\"\");\n  const [maxAcreage, setMaxAcreage] = useState(\"\");\n\n  const mapRef = useRef(null);\n\n  // Effect to compute displayedPricingData whenever filters change\n  useEffect(() => {\n    let filtered = pricingData;\n\n    // Apply shape filter if any\n    if (shapeFilteredData.length > 0) {\n      const shapeAPNs = new Set(shapeFilteredData.map((item) => item.apn));\n      filtered = filtered.filter((item) => shapeAPNs.has(item.apn));\n    }\n\n    // Apply acreage filter if set\n    if (acreageFilteredData.length > 0) {\n      const acreageAPNs = new Set(acreageFilteredData.map((item) => item.apn));\n      filtered = filtered.filter((item) => acreageAPNs.has(item.apn));\n    }\n\n    setDisplayedPricingData(filtered);\n  }, [shapeFilteredData, acreageFilteredData, pricingData]);\n\n  // Handler for uploading Main CSV\n  const handleMainCSVUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (results) => {\n        const parsedData = results.data\n          .filter((row) => {\n            const lat = parseFloat(row.LATITUDE);\n            const lng = parseFloat(row.LONGITUDE);\n            return Number.isFinite(lat) && Number.isFinite(lng);\n          })\n          .map((row) => ({\n            coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n            details: row,\n          }));\n        setLocations(parsedData);\n      },\n      error: (err) => console.error(\"PapaParse Error (Main CSV):\", err),\n    });\n  };\n\n  // Handler for uploading Pricing CSV\n  const handlePricingCSVUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      chunkSize: 500,\n      chunk: (results) => {\n        const chunkData = results.data\n          .filter((row) => {\n            const lat = parseFloat(row.LATITUDE);\n            const lng = parseFloat(row.LONGITUDE);\n            return (\n              Number.isFinite(lat) &&\n              Number.isFinite(lng) &&\n              row[\"APN - FORMATTED\"]\n            );\n          })\n          .map((row) => ({\n            apn: row[\"APN - FORMATTED\"],\n            coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n            lotAcreage: row[\"LOT ACREAGE\"]\n              ? parseFloat(row[\"LOT ACREAGE\"])\n              : null,\n          }));\n        setPricingData((prev) => {\n          const updated = [...prev, ...chunkData];\n          return updated;\n        });\n      },\n      complete: () => console.log(\"Pricing CSV parsing complete!\"),\n      error: (err) => console.error(\"PapaParse Error (Pricing CSV):\", err),\n    });\n  };\n\n  function DrawHandler({ pricingData, locations, setShapeFilteredData }) {\n    const map = useMap();\n    const [controlAdded, setControlAdded] = useState(false);\n  \n    // Function to check if a point is within the drawn shape\n    const isPointInShape = (lat, lng, layer) => {\n      if (layer instanceof L.Circle || layer instanceof L.CircleMarker) {\n        const center = layer.getLatLng();\n        const radius = layer.getRadius();\n        return map.distance(center, L.latLng(lat, lng)) <= radius;\n      } else {\n        const shapeGeoJSON = layer.toGeoJSON();\n        const polygonGeometry = polygon(shapeGeoJSON.geometry.coordinates);\n        return booleanPointInPolygon(point([lng, lat]), polygonGeometry);\n      }\n    };\n  \n    // Function to handle data filtering when a shape is drawn\n    const handleShapeDrawn = (layer) => {\n      const filteredPricing = pricingData.filter((p) => {\n        const [lat, lng] = p.coords;\n        return isPointInShape(lat, lng, layer);\n      });\n  \n      const filteredComps = locations.filter((loc) => {\n        const [lat, lng] = loc.coords;\n        return isPointInShape(lat, lng, layer);\n      });\n  \n      const combinedData = [\n        ...filteredPricing.map((item) => ({\n          type: \"pricing\",\n          apn: item.apn,\n          lotAcreage: item.lotAcreage,\n          latitude: item.coords[0],\n          longitude: item.coords[1],\n        })),\n        ...filteredComps.map((item) => ({\n          type: \"comps\",\n          price: item.details.PRICE,\n          acres: item.details.ACRES,\n          latitude: item.coords[0],\n          longitude: item.coords[1],\n        })),\n      ];\n  \n      setShapeFilteredData(combinedData);\n    };\n  \n    // Initialize drawing controls once\n    useEffect(() => {\n      if (!controlAdded) {\n        const drawnItems = new L.FeatureGroup();\n        map.addLayer(drawnItems);\n        const drawControl = new L.Control.Draw({\n          draw: {\n            marker: false,\n            polyline: false,\n            circle: { shapeOptions: { color: \"#ff0000\" }, showRadius: true },\n            circlemarker: { shapeOptions: { color: \"#ff0000\" } },\n            polygon: { shapeOptions: { color: \"#0000ff\" }, showArea: true },\n            rectangle: { shapeOptions: { color: \"#00ff00\" } },\n          },\n          edit: { featureGroup: drawnItems },\n        });\n        map.addControl(drawControl);\n        setControlAdded(true);\n  \n        map.on(\"draw:created\", (e) => {\n          const { layer } = e;\n          drawnItems.addLayer(layer);\n          handleShapeDrawn(layer);\n        });\n      }\n    }, [map, controlAdded, pricingData, locations, setShapeFilteredData]);\n  \n    return null;\n  }\n  // Handler for applying acreage filter\n  const applyAcreageFilter = () => {\n    const minVal = parseFloat(minAcreage);\n    const maxVal = parseFloat(maxAcreage);\n\n    if (isNaN(minVal) || isNaN(maxVal)) {\n      alert(\"Please enter valid numeric values for both min and max acreage.\");\n      return;\n    }\n\n    const filtered = pricingData.filter((pd) => {\n      if (pd.lotAcreage == null) return false;\n      return pd.lotAcreage >= minVal && pd.lotAcreage <= maxVal;\n    });\n\n    setAcreageFilteredData(filtered);\n  };\n\n  // Handler for clearing all filters\n  const clearFilters = () => {\n    setShapeFilteredData([]);\n    setAcreageFilteredData([]);\n    setMinAcreage(\"\");\n    setMaxAcreage(\"\");\n  };\n\n  // Handler for downloading filtered data and removing them from the map\n  const downloadFilteredDataToExcel = () => {\n    if (displayedPricingData.length === 0) {\n      alert(\"No data points to download.\");\n      return;\n    }\n\n    // Prepare data for export\n\n    const pricingDataTab = displayedPricingData.map((item) => ({\n      APN: item.apn,\n      \"LOT ACREAGE\": item.lotAcreage,\n      Latitude: item.coords ? item.coords[0] : item.latitude,\n      Longitude: item.coords ? item.coords[1] : item.longitude,\n    }));\n \n\n\n    // Create and download Excel file\n    const workbook = XLSX.utils.book_new();\n    const pricingSheet = XLSX.utils.json_to_sheet(pricingDataTab);\n    XLSX.utils.book_append_sheet(workbook, pricingSheet, \"Pricing Data\");\n    XLSX.writeFile(workbook, \"filtered_data.xlsx\");\n\n    // Identify APNs of exported points for removal\n    const exportedAPNs = new Set(displayedPricingData.map((item) => item.apn));\n\n    // Remove exported points from locations and pricingData states\n    setLocations((prev) =>\n      prev.filter((loc) => !exportedAPNs.has(loc.details[\"APN - FORMATTED\"]))\n    );\n    setPricingData((prev) =>\n      prev.filter((pt) => !exportedAPNs.has(pt.apn))\n    );\n\n   \n    // Clear filtered data\n    setShapeFilteredData([]);\n    setAcreageFilteredData([]);\n    setDisplayedPricingData([]);\n\n    \n    alert(\"Filtered data downloaded and removed from the map.\");\n  };\n\n  return (\n    <div style={{ height: \"100vh\", width: \"100%\", position: \"relative\" }}>\n      {/* Control Panel */}\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 1000,\n          top: 10,\n          right: 10,\n          background: \"#f8f9fa\",\n          padding: \"12px 15px\",\n          borderRadius: \"8px\",\n          boxShadow: \"0 3px 8px rgba(0,0,0,0.15)\",\n          width: \"280px\",\n          fontFamily: \"Arial, sans-serif\",\n        }}\n      >\n        <h3 style={{ marginTop: 0, marginBottom: \"10px\" }}>Data Controls</h3>\n\n        {/* Upload Main CSV */}\n        <div style={{ marginBottom: \"15px\" }}>\n          <label style={{ display: \"block\", fontWeight: \"bold\" }}>\n            Upload Main CSV:\n          </label>\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleMainCSVUpload}\n            style={{ width: \"100%\", marginTop: \"5px\" }}\n          />\n        </div>\n\n        {/* Upload Pricing CSV */}\n        <div style={{ marginBottom: \"15px\" }}>\n          <label style={{ display: \"block\", fontWeight: \"bold\" }}>\n            Upload Pricing CSV:\n          </label>\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handlePricingCSVUpload}\n            style={{ width: \"100%\", marginTop: \"5px\" }}\n          />\n        </div>\n\n        {/* Acreage Filter */}\n        <div\n          style={{\n            marginBottom: \"15px\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"6px\",\n            padding: \"8px\",\n          }}\n        >\n          <label style={{ fontWeight: \"bold\" }}>Acreage Filter</label>\n          <div style={{ marginTop: \"8px\" }}>\n            <label>Min Acreage:</label>\n            <input\n              type=\"number\"\n              value={minAcreage}\n              onChange={(e) => setMinAcreage(e.target.value)}\n              style={{ width: \"60px\", marginLeft: \"10px\", marginRight: \"20px\" }}\n            />\n            <label>Max Acreage:</label>\n            <input\n              type=\"number\"\n              value={maxAcreage}\n              onChange={(e) => setMaxAcreage(e.target.value)}\n              style={{ width: \"60px\", marginLeft: \"10px\" }}\n            />\n          </div>\n          <button\n            onClick={applyAcreageFilter}\n            style={{\n              marginTop: \"10px\",\n              padding: \"6px 12px\",\n              background: \"#17a2b8\",\n              color: \"white\",\n              border: \"none\",\n              borderRadius: \"4px\",\n              cursor: \"pointer\",\n            }}\n          >\n            Apply Filter\n          </button>\n          <button\n            onClick={clearFilters}\n            style={{\n              marginTop: \"10px\",\n              marginLeft: \"10px\",\n              padding: \"6px 12px\",\n              background: \"#6c757d\",\n              color: \"white\",\n              border: \"none\",\n              borderRadius: \"4px\",\n              cursor: \"pointer\",\n            }}\n          >\n            Clear Filter\n          </button>\n        </div>\n\n        {/* Download Button */}\n        <button\n          onClick={downloadFilteredDataToExcel}\n          style={{\n            marginTop: \"5px\",\n            padding: \"8px 12px\",\n            background: \"#007bff\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\",\n            width: \"100%\",\n          }}\n        >\n          Download Filtered Data (Excel)\n        </button>\n      </div>\n\n      {/* The Map */}\n      <MapContainer\n        center={[41.2033, -77.1945]}\n        zoom={7}\n        style={{ height: \"100%\", width: \"100%\" }}\n        ref={mapRef}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; OpenStreetMap contributors\"\n        />\n\n        {/* ZIP Code Overlay */}\n        <ZipOverlay />\n\n        {/* Draw Handler for shape-based filtering */}\n        <DrawHandler\n          pricingData={pricingData}\n          locations={locations}\n          setShapeFilteredData={setShapeFilteredData}\n        />\n\n        {/* Markers from Main CSV */}\n        {locations\n          .filter(\n            (loc) =>\n              Number.isFinite(loc.coords[0]) && Number.isFinite(loc.coords[1])\n          )\n          .map((loc, index) => (\n            <Marker key={index} position={loc.coords} icon={CustomMarkerIcon}>\n              <Tooltip direction=\"top\" offset={[0, -10]}>\n                <div style={{ textAlign: \"left\" }}>\n                  <strong>PRICE:</strong> {loc.details.PRICE}\n                  <br />\n                  <strong>ACRES:</strong> {loc.details.ACRES}\n                </div>\n              </Tooltip>\n            </Marker>\n          ))}\n\n        {/* Markers from Pricing CSV (Filtered) */}\n        {displayedPricingData\n          .filter(\n            (item) =>\n              (item.coords &&\n                Number.isFinite(item.coords[0]) &&\n                Number.isFinite(item.coords[1])) ||\n              (Number.isFinite(item.latitude) && Number.isFinite(item.longitude))\n          )\n          .map((point, index) => (\n            <Marker\n              key={index}\n              position={\n                point.coords &&\n                Number.isFinite(point.coords[0]) &&\n                Number.isFinite(point.coords[1])\n                  ? point.coords\n                  : [point.latitude, point.longitude]\n              }\n              icon={DotIcon}\n            >\n              {point.lotAcreage !== null && (\n                <Tooltip direction=\"top\" offset={[0, -10]}>\n                  <div>\n                    <strong>LOT ACREAGE:</strong> {point.lotAcreage}\n                  </div>\n                </Tooltip>\n              )}\n            </Marker>\n          ))}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}