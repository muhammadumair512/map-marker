{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CREATIVE_SOLUTIONS\\\\Desktop\\\\bolt\\\\bolt codesandbox\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\n// perfectly working filter and proper showing of points but download doesnot woork as expected\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Tooltip, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Papa from \"papaparse\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { point, polygon } from \"@turf/helpers\";\nimport * as XLSX from \"xlsx\";\n\n// Custom icons\nimport CustomMarkerIconImage from \"./custom-marker.png\";\nimport DotIconImage from \"./small-dot.png\";\n\n// Marker icons\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomMarkerIcon = L.icon({\n  iconUrl: CustomMarkerIconImage,\n  iconSize: [30, 40],\n  iconAnchor: [15, 40],\n  popupAnchor: [0, -40]\n});\nconst DotIcon = L.icon({\n  iconUrl: DotIconImage,\n  iconSize: [10, 10],\n  iconAnchor: [5, 5]\n});\n\n// ZipOverlay Component to display ZIP codes\nfunction ZipOverlay() {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    const url = \"https://raw.githubusercontent.com/OpenDataDE/State-zip-code-GeoJSON/master/pa_pennsylvania_zip_codes_geo.min.json\";\n    fetch(url).then(res => res.json()).then(geoData => {\n      const layer = L.geoJSON(geoData, {\n        style: {\n          color: \"#ff7800\",\n          weight: 1,\n          fillColor: \"#ffeda0\",\n          fillOpacity: 0.4\n        },\n        onEachFeature: (feature, layerInstance) => {\n          const zip = feature.properties.ZCTA5CE10 || \"Unknown ZIP\";\n          layerInstance.bindPopup(\"ZIP Code: \".concat(zip));\n        }\n      });\n      layer.addTo(map);\n    }).catch(err => console.error(\"Error fetching ZIP code GeoJSON:\", err));\n  }, [map]);\n  return null;\n}\n\n// DrawHandler Component to handle shape drawings\n_s(ZipOverlay, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = ZipOverlay;\nfunction DrawHandler(_ref) {\n  _s2();\n  let {\n    pricingData,\n    locations,\n    setShapeFilteredData\n  } = _ref;\n  const map = useMap();\n  const [controlAdded, setControlAdded] = useState(false);\n\n  // Function to check if a point is within the drawn shape\n  const isPointInShape = (lat, lng, layer) => {\n    console.log('isptshape' + lat, long, layer);\n    if (layer instanceof L.Circle || layer instanceof L.CircleMarker) {\n      const center = layer.getLatLng();\n      const radius = layer.getRadius();\n      return map.distance(center, L.latLng(lat, lng)) <= radius;\n    } else {\n      const shapeGeoJSON = layer.toGeoJSON();\n      const polygonGeometry = polygon(shapeGeoJSON.geometry.coordinates);\n      return booleanPointInPolygon(point([lng, lat]), polygonGeometry);\n    }\n  };\n\n  // Function to handle data filtering when a shape is drawn\n  const handleShapeDrawn = layer => {\n    const filteredPricing = pricingData.filter(p => {\n      const [lat, lng] = p.coords;\n      return isPointInShape(lat, lng, layer);\n    });\n    const filteredComps = locations.filter(loc => {\n      const [lat, lng] = loc.coords;\n      console.log(lat, lng);\n      return isPointInShape(lat, lng, layer);\n    });\n    const combinedData = [...filteredPricing.map(item => ({\n      type: \"pricing\",\n      apn: item.apn,\n      lotAcreage: item.lotAcreage,\n      latitude: item.coords[0],\n      longitude: item.coords[1]\n    })), ...filteredComps.map(item => ({\n      type: \"comps\",\n      price: item.details.PRICE,\n      acres: item.details.ACRES,\n      latitude: item.coords[0],\n      longitude: item.coords[1]\n    }))];\n    setShapeFilteredData(combinedData);\n    console.log(combinedData);\n  };\n\n  // Initialize drawing controls once\n  useEffect(() => {\n    if (!controlAdded) {\n      const drawnItems = new L.FeatureGroup();\n      map.addLayer(drawnItems);\n      const drawControl = new L.Control.Draw({\n        draw: {\n          marker: false,\n          polyline: false,\n          circle: {\n            shapeOptions: {\n              color: \"#ff0000\"\n            },\n            showRadius: true\n          },\n          circlemarker: {\n            shapeOptions: {\n              color: \"#ff0000\"\n            }\n          },\n          polygon: {\n            shapeOptions: {\n              color: \"#0000ff\"\n            },\n            showArea: true\n          },\n          rectangle: {\n            shapeOptions: {\n              color: \"#00ff00\"\n            }\n          }\n        },\n        edit: {\n          featureGroup: drawnItems\n        }\n      });\n      map.addControl(drawControl);\n      setControlAdded(true);\n      map.on(\"draw:created\", e => {\n        const {\n          layer\n        } = e;\n        drawnItems.addLayer(layer);\n        handleShapeDrawn(layer);\n      });\n    }\n  }, [map, controlAdded, pricingData, locations, setShapeFilteredData]);\n  return null;\n}\n\n// Main App Component\n_s2(DrawHandler, \"hwbgWOkN5teoty/Wul8Dw6LkzlM=\", false, function () {\n  return [useMap];\n});\n_c2 = DrawHandler;\nfunction App() {\n  _s3();\n  // Master data lists\n  const [locations, setLocations] = useState([]); // From Main CSV\n  const [pricingData, setPricingData] = useState([]); // From Pricing CSV\n\n  // Filtered data lists\n  const [shapeFilteredData, setShapeFilteredData] = useState([]); // Data within drawn shape\n  const [acreageFilteredData, setAcreageFilteredData] = useState([]); // Data within acreage range\n\n  // Displayed data after applying all filters\n  const [displayedPricingData, setDisplayedPricingData] = useState([]);\n\n  // Acreage filter inputs\n  const [minAcreage, setMinAcreage] = useState(\"\");\n  const [maxAcreage, setMaxAcreage] = useState(\"\");\n  const mapRef = useRef(null);\n\n  // Effect to compute displayedPricingData whenever filters change\n  useEffect(() => {\n    let filtered = pricingData;\n\n    // Apply shape filter if any\n    if (shapeFilteredData.length > 0) {\n      const shapeAPNs = new Set(shapeFilteredData.map(item => item.apn));\n      filtered = filtered.filter(item => shapeAPNs.has(item.apn));\n    }\n\n    // Apply acreage filter if set\n    if (acreageFilteredData.length > 0) {\n      const acreageAPNs = new Set(acreageFilteredData.map(item => item.apn));\n      filtered = filtered.filter(item => acreageAPNs.has(item.apn));\n    }\n    setDisplayedPricingData(filtered);\n  }, [shapeFilteredData, acreageFilteredData, pricingData]);\n\n  // Handler for uploading Main CSV\n  const handleMainCSVUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        const parsedData = results.data.filter(row => {\n          const lat = parseFloat(row.LATITUDE);\n          const lng = parseFloat(row.LONGITUDE);\n          return Number.isFinite(lat) && Number.isFinite(lng);\n        }).map(row => ({\n          coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n          details: row\n        }));\n        setLocations(parsedData);\n      },\n      error: err => console.error(\"PapaParse Error (Main CSV):\", err)\n    });\n  };\n\n  // Handler for uploading Pricing CSV\n  const handlePricingCSVUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      chunkSize: 500,\n      chunk: results => {\n        const chunkData = results.data.filter(row => {\n          const lat = parseFloat(row.LATITUDE);\n          const lng = parseFloat(row.LONGITUDE);\n          return Number.isFinite(lat) && Number.isFinite(lng) && row[\"APN - FORMATTED\"];\n        }).map(row => ({\n          apn: row[\"APN - FORMATTED\"],\n          coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n          lotAcreage: row[\"LOT ACREAGE\"] ? parseFloat(row[\"LOT ACREAGE\"]) : null\n        }));\n        setPricingData(prev => {\n          const updated = [...prev, ...chunkData];\n          return updated;\n        });\n      },\n      complete: () => console.log(\"Pricing CSV parsing complete!\"),\n      error: err => console.error(\"PapaParse Error (Pricing CSV):\", err)\n    });\n  };\n\n  // Handler for applying acreage filter\n  const applyAcreageFilter = () => {\n    const minVal = parseFloat(minAcreage);\n    const maxVal = parseFloat(maxAcreage);\n    if (isNaN(minVal) || isNaN(maxVal)) {\n      alert(\"Please enter valid numeric values for both min and max acreage.\");\n      return;\n    }\n    const filtered = pricingData.filter(pd => {\n      if (pd.lotAcreage == null) return false;\n      return pd.lotAcreage >= minVal && pd.lotAcreage <= maxVal;\n    });\n    setAcreageFilteredData(filtered);\n  };\n\n  // Handler for clearing all filters\n  const clearFilters = () => {\n    setShapeFilteredData([]);\n    setAcreageFilteredData([]);\n    setMinAcreage(\"\");\n    setMaxAcreage(\"\");\n  };\n\n  // Handler for downloading filtered data and removing them from the map\n  const downloadFilteredDataToExcel = () => {\n    if (displayedPricingData.length === 0) {\n      alert(\"No data points to download.\");\n      return;\n    }\n\n    // Prepare data for export\n\n    const pricingDataTab = displayedPricingData.map(item => ({\n      APN: item.apn,\n      \"LOT ACREAGE\": item.lotAcreage,\n      Latitude: item.coords ? item.coords[0] : item.latitude,\n      Longitude: item.coords ? item.coords[1] : item.longitude\n    }));\n\n    // Create and download Excel file\n    const workbook = XLSX.utils.book_new();\n    const pricingSheet = XLSX.utils.json_to_sheet(pricingDataTab);\n    XLSX.utils.book_append_sheet(workbook, pricingSheet, \"Pricing Data\");\n    XLSX.writeFile(workbook, \"filtered_data.xlsx\");\n\n    // Identify APNs of exported points for removal\n    const exportedAPNs = new Set(displayedPricingData.map(item => item.apn));\n\n    // Remove exported points from locations and pricingData states\n    setLocations(prev => prev.filter(loc => !exportedAPNs.has(loc.details[\"APN - FORMATTED\"])));\n    setPricingData(prev => prev.filter(pt => !exportedAPNs.has(pt.apn)));\n\n    // Clear filtered data\n    setShapeFilteredData([]);\n    setAcreageFilteredData([]);\n    setDisplayedPricingData([]);\n    alert(\"Filtered data downloaded and removed from the map.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100%\",\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        zIndex: 1000,\n        top: 10,\n        right: 10,\n        background: \"#f8f9fa\",\n        padding: \"12px 15px\",\n        borderRadius: \"8px\",\n        boxShadow: \"0 3px 8px rgba(0,0,0,0.15)\",\n        width: \"280px\",\n        fontFamily: \"Arial, sans-serif\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        style: {\n          marginTop: 0,\n          marginBottom: \"10px\"\n        },\n        children: \"Data Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"15px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: \"block\",\n            fontWeight: \"bold\"\n          },\n          children: \"Upload Main CSV:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          onChange: handleMainCSVUpload,\n          style: {\n            width: \"100%\",\n            marginTop: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"15px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: \"block\",\n            fontWeight: \"bold\"\n          },\n          children: \"Upload Pricing CSV:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          onChange: handlePricingCSVUpload,\n          style: {\n            width: \"100%\",\n            marginTop: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"15px\",\n          border: \"1px solid #ccc\",\n          borderRadius: \"6px\",\n          padding: \"8px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            fontWeight: \"bold\"\n          },\n          children: \"Acreage Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 371,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            marginTop: \"8px\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Min Acreage:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 373,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: minAcreage,\n            onChange: e => setMinAcreage(e.target.value),\n            style: {\n              width: \"60px\",\n              marginLeft: \"10px\",\n              marginRight: \"20px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 374,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Max Acreage:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 380,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            value: maxAcreage,\n            onChange: e => setMaxAcreage(e.target.value),\n            style: {\n              width: \"60px\",\n              marginLeft: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 381,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 372,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: applyAcreageFilter,\n          style: {\n            marginTop: \"10px\",\n            padding: \"6px 12px\",\n            background: \"#17a2b8\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\"\n          },\n          children: \"Apply Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 388,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: clearFilters,\n          style: {\n            marginTop: \"10px\",\n            marginLeft: \"10px\",\n            padding: \"6px 12px\",\n            background: \"#6c757d\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\"\n          },\n          children: \"Clear Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 402,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadFilteredDataToExcel,\n        style: {\n          marginTop: \"5px\",\n          padding: \"8px 12px\",\n          background: \"#007bff\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"4px\",\n          cursor: \"pointer\",\n          width: \"100%\"\n        },\n        children: \"Download Filtered Data (Excel)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 420,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [41.2033, -77.1945],\n      zoom: 7,\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      },\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 444,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ZipOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 450,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DrawHandler, {\n        pricingData: pricingData,\n        locations: locations,\n        setShapeFilteredData: setShapeFilteredData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 9\n      }, this), locations.filter(loc => Number.isFinite(loc.coords[0]) && Number.isFinite(loc.coords[1])).map((loc, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: loc.coords,\n        icon: CustomMarkerIcon,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          direction: \"top\",\n          offset: [0, -10],\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"left\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"PRICE:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 469,\n              columnNumber: 19\n            }, this), \" \", loc.details.PRICE, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 470,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"ACRES:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 471,\n              columnNumber: 19\n            }, this), \" \", loc.details.ACRES]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 468,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 467,\n          columnNumber: 15\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 466,\n        columnNumber: 13\n      }, this)), displayedPricingData.filter(item => item.coords && Number.isFinite(item.coords[0]) && Number.isFinite(item.coords[1]) || Number.isFinite(item.latitude) && Number.isFinite(item.longitude)).map((point, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: point.coords && Number.isFinite(point.coords[0]) && Number.isFinite(point.coords[1]) ? point.coords : [point.latitude, point.longitude],\n        icon: DotIcon,\n        children: point.lotAcreage !== null && /*#__PURE__*/_jsxDEV(Tooltip, {\n          direction: \"top\",\n          offset: [0, -10],\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"LOT ACREAGE:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 501,\n              columnNumber: 21\n            }, this), \" \", point.lotAcreage]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 500,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 17\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 487,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 318,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"69x+gDvyGjV85BmJ8II23Q48Yw0=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ZipOverlay\");\n$RefreshReg$(_c2, \"DrawHandler\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MapContainer","TileLayer","Marker","Tooltip","useMap","Papa","L","booleanPointInPolygon","point","polygon","XLSX","CustomMarkerIconImage","DotIconImage","jsxDEV","_jsxDEV","CustomMarkerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","DotIcon","ZipOverlay","_s","map","url","fetch","then","res","json","geoData","layer","geoJSON","style","color","weight","fillColor","fillOpacity","onEachFeature","feature","layerInstance","zip","properties","ZCTA5CE10","bindPopup","concat","addTo","catch","err","console","error","_c","DrawHandler","_ref","_s2","pricingData","locations","setShapeFilteredData","controlAdded","setControlAdded","isPointInShape","lat","lng","log","long","Circle","CircleMarker","center","getLatLng","radius","getRadius","distance","latLng","shapeGeoJSON","toGeoJSON","polygonGeometry","geometry","coordinates","handleShapeDrawn","filteredPricing","filter","p","coords","filteredComps","loc","combinedData","item","type","apn","lotAcreage","latitude","longitude","price","details","PRICE","acres","ACRES","drawnItems","FeatureGroup","addLayer","drawControl","Control","Draw","draw","marker","polyline","circle","shapeOptions","showRadius","circlemarker","showArea","rectangle","edit","featureGroup","addControl","on","e","_c2","App","_s3","setLocations","setPricingData","shapeFilteredData","acreageFilteredData","setAcreageFilteredData","displayedPricingData","setDisplayedPricingData","minAcreage","setMinAcreage","maxAcreage","setMaxAcreage","mapRef","filtered","length","shapeAPNs","Set","has","acreageAPNs","handleMainCSVUpload","event","file","target","files","parse","header","skipEmptyLines","complete","results","parsedData","data","row","parseFloat","LATITUDE","LONGITUDE","Number","isFinite","handlePricingCSVUpload","chunkSize","chunk","chunkData","prev","updated","applyAcreageFilter","minVal","maxVal","isNaN","alert","pd","clearFilters","downloadFilteredDataToExcel","pricingDataTab","APN","Latitude","Longitude","workbook","utils","book_new","pricingSheet","json_to_sheet","book_append_sheet","writeFile","exportedAPNs","pt","height","width","position","children","zIndex","top","right","background","padding","borderRadius","boxShadow","fontFamily","marginTop","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","display","fontWeight","accept","onChange","border","value","marginLeft","marginRight","onClick","cursor","zoom","ref","attribution","index","direction","offset","textAlign","_c3","$RefreshReg$"],"sources":["C:/Users/CREATIVE_SOLUTIONS/Desktop/bolt/bolt codesandbox/src/App.js"],"sourcesContent":["// perfectly working filter and proper showing of points but download doesnot woork as expected\nimport React, { useState, useRef, useEffect } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Tooltip,\n  useMap,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Papa from \"papaparse\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { point, polygon } from \"@turf/helpers\";\nimport * as XLSX from \"xlsx\";\n\n// Custom icons\nimport CustomMarkerIconImage from \"./custom-marker.png\";\nimport DotIconImage from \"./small-dot.png\";\n\n// Marker icons\nconst CustomMarkerIcon = L.icon({\n  iconUrl: CustomMarkerIconImage,\n  iconSize: [30, 40],\n  iconAnchor: [15, 40],\n  popupAnchor: [0, -40],\n});\nconst DotIcon = L.icon({\n  iconUrl: DotIconImage,\n  iconSize: [10, 10],\n  iconAnchor: [5, 5],\n});\n\n// ZipOverlay Component to display ZIP codes\nfunction ZipOverlay() {\n  const map = useMap();\n  useEffect(() => {\n    const url =\n      \"https://raw.githubusercontent.com/OpenDataDE/State-zip-code-GeoJSON/master/pa_pennsylvania_zip_codes_geo.min.json\";\n    fetch(url)\n      .then((res) => res.json())\n      .then((geoData) => {\n        const layer = L.geoJSON(geoData, {\n          style: {\n            color: \"#ff7800\",\n            weight: 1,\n            fillColor: \"#ffeda0\",\n            fillOpacity: 0.4,\n          },\n          onEachFeature: (feature, layerInstance) => {\n            const zip = feature.properties.ZCTA5CE10 || \"Unknown ZIP\";\n            layerInstance.bindPopup(`ZIP Code: ${zip}`);\n          },\n        });\n        layer.addTo(map);\n      })\n      .catch((err) => console.error(\"Error fetching ZIP code GeoJSON:\", err));\n  }, [map]);\n  return null;\n}\n\n// DrawHandler Component to handle shape drawings\nfunction DrawHandler({ pricingData, locations, setShapeFilteredData }) {\n  const map = useMap();\n  const [controlAdded, setControlAdded] = useState(false);\n\n  // Function to check if a point is within the drawn shape\n  const isPointInShape = (lat, lng, layer) => {\n    console.log('isptshape' + lat,long,layer)\n    if (layer instanceof L.Circle || layer instanceof L.CircleMarker) {\n      const center = layer.getLatLng();\n      const radius = layer.getRadius();\n      return map.distance(center, L.latLng(lat, lng)) <= radius;\n    } else {\n      const shapeGeoJSON = layer.toGeoJSON();\n      const polygonGeometry = polygon(shapeGeoJSON.geometry.coordinates);\n      return booleanPointInPolygon(point([lng, lat]), polygonGeometry);\n    }\n  };\n\n  // Function to handle data filtering when a shape is drawn\n  const handleShapeDrawn = (layer) => {\n    const filteredPricing = pricingData.filter((p) => {\n      const [lat, lng] = p.coords;\n      return isPointInShape(lat, lng, layer);\n    });\n\n    const filteredComps = locations.filter((loc) => {\n      const [lat, lng] = loc.coords;\n      console.log(lat, lng);\n      return isPointInShape(lat, lng, layer);\n      \n    });\n\n    const combinedData = [\n      ...filteredPricing.map((item) => ({\n        type: \"pricing\",\n        apn: item.apn,\n        lotAcreage: item.lotAcreage,\n        latitude: item.coords[0],\n        longitude: item.coords[1],\n      })),\n      ...filteredComps.map((item) => ({\n        type: \"comps\",\n        price: item.details.PRICE,\n        acres: item.details.ACRES,\n        latitude: item.coords[0],\n        longitude: item.coords[1],\n      })),\n    ];\n\n    setShapeFilteredData(combinedData);\n    console.log(combinedData);\n  };\n\n  // Initialize drawing controls once\n  useEffect(() => {\n    if (!controlAdded) {\n      const drawnItems = new L.FeatureGroup();\n      map.addLayer(drawnItems);\n      const drawControl = new L.Control.Draw({\n        draw: {\n          marker: false,\n          polyline: false,\n          circle: { shapeOptions: { color: \"#ff0000\" }, showRadius: true },\n          circlemarker: { shapeOptions: { color: \"#ff0000\" } },\n          polygon: { shapeOptions: { color: \"#0000ff\" }, showArea: true },\n          rectangle: { shapeOptions: { color: \"#00ff00\" } },\n        },\n        edit: { featureGroup: drawnItems },\n      });\n      map.addControl(drawControl);\n      setControlAdded(true);\n\n      map.on(\"draw:created\", (e) => {\n        const { layer } = e;\n        drawnItems.addLayer(layer);\n        handleShapeDrawn(layer);\n      });\n    }\n  }, [map, controlAdded, pricingData, locations, setShapeFilteredData]);\n\n  return null;\n}\n\n// Main App Component\nfunction App() {\n  // Master data lists\n  const [locations, setLocations] = useState([]); // From Main CSV\n  const [pricingData, setPricingData] = useState([]); // From Pricing CSV\n\n  // Filtered data lists\n  const [shapeFilteredData, setShapeFilteredData] = useState([]); // Data within drawn shape\n  const [acreageFilteredData, setAcreageFilteredData] = useState([]); // Data within acreage range\n\n  // Displayed data after applying all filters\n  const [displayedPricingData, setDisplayedPricingData] = useState([]);\n\n  // Acreage filter inputs\n  const [minAcreage, setMinAcreage] = useState(\"\");\n  const [maxAcreage, setMaxAcreage] = useState(\"\");\n\n  const mapRef = useRef(null);\n\n  // Effect to compute displayedPricingData whenever filters change\n  useEffect(() => {\n    let filtered = pricingData;\n\n    // Apply shape filter if any\n    if (shapeFilteredData.length > 0) {\n      const shapeAPNs = new Set(shapeFilteredData.map((item) => item.apn));\n      filtered = filtered.filter((item) => shapeAPNs.has(item.apn));\n    }\n\n    // Apply acreage filter if set\n    if (acreageFilteredData.length > 0) {\n      const acreageAPNs = new Set(acreageFilteredData.map((item) => item.apn));\n      filtered = filtered.filter((item) => acreageAPNs.has(item.apn));\n    }\n\n    setDisplayedPricingData(filtered);\n  }, [shapeFilteredData, acreageFilteredData, pricingData]);\n\n  // Handler for uploading Main CSV\n  const handleMainCSVUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (results) => {\n        const parsedData = results.data\n          .filter((row) => {\n            const lat = parseFloat(row.LATITUDE);\n            const lng = parseFloat(row.LONGITUDE);\n            return Number.isFinite(lat) && Number.isFinite(lng);\n          })\n          .map((row) => ({\n            coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n            details: row,\n          }));\n        setLocations(parsedData);\n      },\n      error: (err) => console.error(\"PapaParse Error (Main CSV):\", err),\n    });\n  };\n\n  // Handler for uploading Pricing CSV\n  const handlePricingCSVUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      chunkSize: 500,\n      chunk: (results) => {\n        const chunkData = results.data\n          .filter((row) => {\n            const lat = parseFloat(row.LATITUDE);\n            const lng = parseFloat(row.LONGITUDE);\n            return (\n              Number.isFinite(lat) &&\n              Number.isFinite(lng) &&\n              row[\"APN - FORMATTED\"]\n            );\n          })\n          .map((row) => ({\n            apn: row[\"APN - FORMATTED\"],\n            coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n            lotAcreage: row[\"LOT ACREAGE\"]\n              ? parseFloat(row[\"LOT ACREAGE\"])\n              : null,\n          }));\n        setPricingData((prev) => {\n          const updated = [...prev, ...chunkData];\n          return updated;\n        });\n      },\n      complete: () => console.log(\"Pricing CSV parsing complete!\"),\n      error: (err) => console.error(\"PapaParse Error (Pricing CSV):\", err),\n    });\n  };\n\n  // Handler for applying acreage filter\n  const applyAcreageFilter = () => {\n    const minVal = parseFloat(minAcreage);\n    const maxVal = parseFloat(maxAcreage);\n\n    if (isNaN(minVal) || isNaN(maxVal)) {\n      alert(\"Please enter valid numeric values for both min and max acreage.\");\n      return;\n    }\n\n    const filtered = pricingData.filter((pd) => {\n      if (pd.lotAcreage == null) return false;\n      return pd.lotAcreage >= minVal && pd.lotAcreage <= maxVal;\n    });\n\n    setAcreageFilteredData(filtered);\n  };\n\n  // Handler for clearing all filters\n  const clearFilters = () => {\n    setShapeFilteredData([]);\n    setAcreageFilteredData([]);\n    setMinAcreage(\"\");\n    setMaxAcreage(\"\");\n  };\n\n  // Handler for downloading filtered data and removing them from the map\n  const downloadFilteredDataToExcel = () => {\n    if (displayedPricingData.length === 0) {\n      alert(\"No data points to download.\");\n      return;\n    }\n\n    // Prepare data for export\n\n    const pricingDataTab = displayedPricingData.map((item) => ({\n      APN: item.apn,\n      \"LOT ACREAGE\": item.lotAcreage,\n      Latitude: item.coords ? item.coords[0] : item.latitude,\n      Longitude: item.coords ? item.coords[1] : item.longitude,\n    }));\n \n\n\n    // Create and download Excel file\n    const workbook = XLSX.utils.book_new();\n    const pricingSheet = XLSX.utils.json_to_sheet(pricingDataTab);\n    XLSX.utils.book_append_sheet(workbook, pricingSheet, \"Pricing Data\");\n    XLSX.writeFile(workbook, \"filtered_data.xlsx\");\n\n    // Identify APNs of exported points for removal\n    const exportedAPNs = new Set(displayedPricingData.map((item) => item.apn));\n\n    // Remove exported points from locations and pricingData states\n    setLocations((prev) =>\n      prev.filter((loc) => !exportedAPNs.has(loc.details[\"APN - FORMATTED\"]))\n    );\n    setPricingData((prev) =>\n      prev.filter((pt) => !exportedAPNs.has(pt.apn))\n    );\n\n   \n    // Clear filtered data\n    setShapeFilteredData([]);\n    setAcreageFilteredData([]);\n    setDisplayedPricingData([]);\n\n    \n    alert(\"Filtered data downloaded and removed from the map.\");\n  };\n\n  return (\n    <div style={{ height: \"100vh\", width: \"100%\", position: \"relative\" }}>\n      {/* Control Panel */}\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 1000,\n          top: 10,\n          right: 10,\n          background: \"#f8f9fa\",\n          padding: \"12px 15px\",\n          borderRadius: \"8px\",\n          boxShadow: \"0 3px 8px rgba(0,0,0,0.15)\",\n          width: \"280px\",\n          fontFamily: \"Arial, sans-serif\",\n        }}\n      >\n        <h3 style={{ marginTop: 0, marginBottom: \"10px\" }}>Data Controls</h3>\n\n        {/* Upload Main CSV */}\n        <div style={{ marginBottom: \"15px\" }}>\n          <label style={{ display: \"block\", fontWeight: \"bold\" }}>\n            Upload Main CSV:\n          </label>\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleMainCSVUpload}\n            style={{ width: \"100%\", marginTop: \"5px\" }}\n          />\n        </div>\n\n        {/* Upload Pricing CSV */}\n        <div style={{ marginBottom: \"15px\" }}>\n          <label style={{ display: \"block\", fontWeight: \"bold\" }}>\n            Upload Pricing CSV:\n          </label>\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handlePricingCSVUpload}\n            style={{ width: \"100%\", marginTop: \"5px\" }}\n          />\n        </div>\n\n        {/* Acreage Filter */}\n        <div\n          style={{\n            marginBottom: \"15px\",\n            border: \"1px solid #ccc\",\n            borderRadius: \"6px\",\n            padding: \"8px\",\n          }}\n        >\n          <label style={{ fontWeight: \"bold\" }}>Acreage Filter</label>\n          <div style={{ marginTop: \"8px\" }}>\n            <label>Min Acreage:</label>\n            <input\n              type=\"number\"\n              value={minAcreage}\n              onChange={(e) => setMinAcreage(e.target.value)}\n              style={{ width: \"60px\", marginLeft: \"10px\", marginRight: \"20px\" }}\n            />\n            <label>Max Acreage:</label>\n            <input\n              type=\"number\"\n              value={maxAcreage}\n              onChange={(e) => setMaxAcreage(e.target.value)}\n              style={{ width: \"60px\", marginLeft: \"10px\" }}\n            />\n          </div>\n          <button\n            onClick={applyAcreageFilter}\n            style={{\n              marginTop: \"10px\",\n              padding: \"6px 12px\",\n              background: \"#17a2b8\",\n              color: \"white\",\n              border: \"none\",\n              borderRadius: \"4px\",\n              cursor: \"pointer\",\n            }}\n          >\n            Apply Filter\n          </button>\n          <button\n            onClick={clearFilters}\n            style={{\n              marginTop: \"10px\",\n              marginLeft: \"10px\",\n              padding: \"6px 12px\",\n              background: \"#6c757d\",\n              color: \"white\",\n              border: \"none\",\n              borderRadius: \"4px\",\n              cursor: \"pointer\",\n            }}\n          >\n            Clear Filter\n          </button>\n        </div>\n\n        {/* Download Button */}\n        <button\n          onClick={downloadFilteredDataToExcel}\n          style={{\n            marginTop: \"5px\",\n            padding: \"8px 12px\",\n            background: \"#007bff\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"4px\",\n            cursor: \"pointer\",\n            width: \"100%\",\n          }}\n        >\n          Download Filtered Data (Excel)\n        </button>\n      </div>\n\n      {/* The Map */}\n      <MapContainer\n        center={[41.2033, -77.1945]}\n        zoom={7}\n        style={{ height: \"100%\", width: \"100%\" }}\n        ref={mapRef}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; OpenStreetMap contributors\"\n        />\n\n        {/* ZIP Code Overlay */}\n        <ZipOverlay />\n\n        {/* Draw Handler for shape-based filtering */}\n        <DrawHandler\n          pricingData={pricingData}\n          locations={locations}\n          setShapeFilteredData={setShapeFilteredData}\n        />\n\n        {/* Markers from Main CSV */}\n        {locations\n          .filter(\n            (loc) =>\n              Number.isFinite(loc.coords[0]) && Number.isFinite(loc.coords[1])\n          )\n          .map((loc, index) => (\n            <Marker key={index} position={loc.coords} icon={CustomMarkerIcon}>\n              <Tooltip direction=\"top\" offset={[0, -10]}>\n                <div style={{ textAlign: \"left\" }}>\n                  <strong>PRICE:</strong> {loc.details.PRICE}\n                  <br />\n                  <strong>ACRES:</strong> {loc.details.ACRES}\n                </div>\n              </Tooltip>\n            </Marker>\n          ))}\n\n        {/* Markers from Pricing CSV (Filtered) */}\n        {displayedPricingData\n          .filter(\n            (item) =>\n              (item.coords &&\n                Number.isFinite(item.coords[0]) &&\n                Number.isFinite(item.coords[1])) ||\n              (Number.isFinite(item.latitude) && Number.isFinite(item.longitude))\n          )\n          .map((point, index) => (\n            <Marker\n              key={index}\n              position={\n                point.coords &&\n                Number.isFinite(point.coords[0]) &&\n                Number.isFinite(point.coords[1])\n                  ? point.coords\n                  : [point.latitude, point.longitude]\n              }\n              icon={DotIcon}\n            >\n              {point.lotAcreage !== null && (\n                <Tooltip direction=\"top\" offset={[0, -10]}>\n                  <div>\n                    <strong>LOT ACREAGE:</strong> {point.lotAcreage}\n                  </div>\n                </Tooltip>\n              )}\n            </Marker>\n          ))}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}