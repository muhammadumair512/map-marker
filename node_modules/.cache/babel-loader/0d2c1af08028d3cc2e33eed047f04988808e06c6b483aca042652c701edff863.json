{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CREATIVE_SOLUTIONS\\\\Desktop\\\\bolt\\\\bolt codesandbox\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport { MapContainer, TileLayer, Marker, Tooltip, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Papa from \"papaparse\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { point, polygon } from \"@turf/helpers\";\nimport * as XLSX from \"xlsx\";\n\n// Custom icons\nimport CustomMarkerIconImage from \"./custom-marker.png\";\nimport DotIconImage from \"./small-dot.png\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomMarkerIcon = L.icon({\n  iconUrl: CustomMarkerIconImage,\n  iconSize: [30, 40],\n  iconAnchor: [15, 40],\n  popupAnchor: [0, -40]\n});\nconst DotIcon = L.icon({\n  iconUrl: DotIconImage,\n  iconSize: [10, 10],\n  iconAnchor: [5, 5]\n});\nfunction ZipOverlay() {\n  _s();\n  const map = useMap();\n  useEffect(() => {\n    const url = \"https://raw.githubusercontent.com/OpenDataDE/State-zip-code-GeoJSON/master/pa_pennsylvania_zip_codes_geo.min.json\";\n    fetch(url).then(res => res.json()).then(geoData => {\n      const layer = L.geoJSON(geoData, {\n        style: {\n          color: \"#ff7800\",\n          weight: 1,\n          fillColor: \"#ffeda0\",\n          fillOpacity: 0.4\n        },\n        onEachFeature: (feature, layerInstance) => {\n          const zip = feature.properties.ZCTA5CE10 || \"Unknown ZIP\";\n          layerInstance.bindPopup(\"ZIP Code: \".concat(zip));\n        }\n      });\n      layer.addTo(map);\n      // map.fitBounds(layer.getBounds()); // Optionally auto-zoom to polygons\n    }).catch(err => {\n      console.error(\"Error fetching ZIP code GeoJSON:\", err);\n    });\n  }, [map]);\n  return null;\n}\n_s(ZipOverlay, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = ZipOverlay;\nfunction DrawHandler(_ref) {\n  _s2();\n  let {\n    pricingData,\n    setFilteredPricingData,\n    locations,\n    setFilteredLocations\n  } = _ref;\n  const map = useMap();\n\n  // Helper function: is point inside the drawn shape?\n  const isPointInShape = (lat, lng, layer) => {\n    // Circle or circleMarker => distance check\n    if (layer instanceof L.Circle || layer instanceof L.CircleMarker) {\n      const center = layer.getLatLng(); // center latLng\n      const radius = layer.getRadius(); // circle radius in meters\n      // Use Leaflet's built-in distance method:\n      const distance = map.distance(center, L.latLng(lat, lng));\n      return distance <= radius;\n    } else {\n      // Polygon or rectangle => use Turf booleanPointInPolygon\n      const shapeGeoJSON = layer.toGeoJSON();\n      const polygonGeometry = polygon(shapeGeoJSON.geometry.coordinates);\n      const pt = point([lng, lat]);\n      return booleanPointInPolygon(pt, polygonGeometry);\n    }\n  };\n\n  // Whenever a shape is drawn, filter points that lie inside it.\n  const handleShapeDrawn = layer => {\n    // Filter pricing data\n    const filteredPricing = pricingData.filter(p => {\n      const [lat, lng] = p.coords;\n      return isPointInShape(lat, lng, layer);\n    });\n\n    // Filter main CSV (comps) data\n    const filteredComps = locations.filter(loc => {\n      const [lat, lng] = loc.coords;\n      return isPointInShape(lat, lng, layer);\n    });\n\n    // Combine them into one array if you want a single “filtered data” state:\n    const combinedData = [...filteredPricing.map(item => ({\n      type: \"pricing\",\n      apn: item.apn,\n      lotAcreage: item.lotAcreage,\n      latitude: item.coords[0],\n      longitude: item.coords[1]\n    })), ...filteredComps.map(item => ({\n      type: \"comps\",\n      price: item.details.PRICE,\n      acres: item.details.ACRES,\n      latitude: item.coords[0],\n      longitude: item.coords[1]\n    }))];\n    setFilteredPricingData(combinedData);\n\n    // If you want to store filtered comps separately:\n    // setFilteredLocations(filteredComps);\n  };\n  useEffect(() => {\n    const drawnItems = new L.FeatureGroup();\n    map.addLayer(drawnItems);\n\n    // Add control once\n    const drawControl = new L.Control.Draw({\n      draw: {\n        marker: false,\n        polyline: false,\n        circle: {\n          shapeOptions: {\n            color: \"#ff0000\"\n          },\n          showRadius: true\n        },\n        circlemarker: {\n          shapeOptions: {\n            color: \"#ff0000\"\n          }\n        },\n        polygon: {\n          shapeOptions: {\n            color: \"#0000ff\"\n          },\n          showArea: true\n        },\n        rectangle: {\n          shapeOptions: {\n            color: \"#00ff00\"\n          }\n        }\n      },\n      edit: {\n        featureGroup: drawnItems\n      }\n    });\n    map.addControl(drawControl);\n\n    // When a shape is created, handle it once.\n    map.on(\"draw:created\", e => {\n      const {\n        layer\n      } = e;\n      drawnItems.addLayer(layer);\n      handleShapeDrawn(layer);\n    });\n  }, [map, pricingData, locations]);\n  return null;\n}\n_s2(DrawHandler, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c2 = DrawHandler;\nfunction App() {\n  _s3();\n  const [locations, setLocations] = useState([]); // Main CSV\n  const [pricingData, setPricingData] = useState([]); // Pricing CSV (raw)\n  const [filteredPricingData, setFilteredPricingData] = useState([]); // Combined filtered\n  const [filteredLocations, setFilteredLocations] = useState([]); // (Optional) filtered comps\n\n  // Acreage filter inputs\n  const [minAcreage, setMinAcreage] = useState(\"\");\n  const [maxAcreage, setMaxAcreage] = useState(\"\");\n  const mapRef = useRef(null);\n\n  // Upload main CSV\n  const handleMainCSVUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const parsedData = results.data.map(row => ({\n          coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n          details: row\n        }));\n        setLocations(parsedData);\n      }\n    });\n  };\n\n  // Upload pricing CSV\n  const handlePricingCSVUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const parsedData = results.data.filter(row => row[\"LATITUDE\"] && row[\"LONGITUDE\"] && row[\"APN - FORMATTED\"]).map(row => ({\n          apn: row[\"APN - FORMATTED\"],\n          coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n          lotAcreage: row[\"LOT ACREAGE\"] ? parseFloat(row[\"LOT ACREAGE\"]) : null\n        }));\n        setPricingData(parsedData);\n        setFilteredPricingData(parsedData); // By default, show all\n      }\n    });\n  };\n\n  // Apply acreage filter only to pricing data\n  const applyAcreageFilter = () => {\n    const minVal = parseFloat(minAcreage);\n    const maxVal = parseFloat(maxAcreage);\n\n    // If either is not a number, show all\n    if (isNaN(minVal) || isNaN(maxVal)) {\n      setFilteredPricingData(pricingData);\n      return;\n    }\n\n    // Filter by acreage in pricingData\n    const filtered = pricingData.filter(pd => {\n      if (pd.lotAcreage == null) return false;\n      return pd.lotAcreage >= minVal && pd.lotAcreage <= maxVal;\n    });\n    setFilteredPricingData(filtered);\n  };\n\n  // Download & export to Excel\n  const downloadFilteredDataToExcel = () => {\n    if (filteredPricingData.length === 0) {\n      alert(\"No data points to download.\");\n      return;\n    }\n    const pricingDataTab = filteredPricingData.filter(item => item.type === \"pricing\").map(item => ({\n      APN: item.apn,\n      \"LOT ACREAGE\": item.lotAcreage,\n      Latitude: item.latitude,\n      Longitude: item.longitude\n    }));\n    const mainDataTab = filteredPricingData.filter(item => item.type === \"comps\").map(item => ({\n      Price: item.price,\n      Acres: item.acres,\n      Latitude: item.latitude,\n      Longitude: item.longitude\n    }));\n    const workbook = XLSX.utils.book_new();\n    const pricingSheet = XLSX.utils.json_to_sheet(pricingDataTab);\n    const mainSheet = XLSX.utils.json_to_sheet(mainDataTab);\n    XLSX.utils.book_append_sheet(workbook, pricingSheet, \"Pricing Data\");\n    XLSX.utils.book_append_sheet(workbook, mainSheet, \"Main Data\");\n    XLSX.writeFile(workbook, \"filtered_data.xlsx\");\n\n    // Example of removing downloaded points from map (optional):\n    const filteredCoords = new Set(filteredPricingData.map(item => [item.latitude, item.longitude].join(\",\")));\n    setLocations(prev => prev.filter(loc => !filteredCoords.has(loc.coords.join(\",\"))));\n    setPricingData(prev => prev.filter(pt => !filteredCoords.has(pt.coords.join(\",\"))));\n\n    // Clear the array so user sees no points after download\n    setFilteredPricingData([]);\n    alert(\"Filtered data downloaded and removed from the map.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        zIndex: 1000,\n        top: 10,\n        right: 10,\n        background: \"white\",\n        padding: \"10px\",\n        borderRadius: \"5px\",\n        boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Upload Main CSV:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: handleMainCSVUpload,\n            style: {\n              display: \"block\",\n              marginBottom: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Upload Pricing CSV:\", \" \", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            accept: \".csv\",\n            onChange: handlePricingCSVUpload,\n            style: {\n              display: \"block\",\n              marginBottom: \"10px\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginTop: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Min Acreage:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 351,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: minAcreage,\n          onChange: e => setMinAcreage(e.target.value),\n          style: {\n            width: \"80px\",\n            marginLeft: \"5px\",\n            marginRight: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 352,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Max Acreage:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          value: maxAcreage,\n          onChange: e => setMaxAcreage(e.target.value),\n          style: {\n            width: \"80px\",\n            marginLeft: \"5px\",\n            marginRight: \"10px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 359,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: applyAcreageFilter,\n          children: \"Apply Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 350,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadFilteredDataToExcel,\n        style: {\n          marginTop: \"10px\",\n          padding: \"5px 10px\",\n          background: \"#007bff\",\n          color: \"white\",\n          border: \"none\",\n          borderRadius: \"3px\",\n          cursor: \"pointer\"\n        },\n        children: \"Download Filtered Data (Excel)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 316,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [41.2033, -77.1945],\n      zoom: 7,\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      },\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 391,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ZipOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 397,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DrawHandler, {\n        pricingData: pricingData,\n        locations: locations,\n        setFilteredPricingData: setFilteredPricingData,\n        setFilteredLocations: setFilteredLocations\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 9\n      }, this), locations.map((loc, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: loc.coords,\n        icon: CustomMarkerIcon,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          direction: \"top\",\n          offset: [0, -10],\n          permanent: true,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"left\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"PRICE:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 412,\n              columnNumber: 17\n            }, this), \" \", loc.details.PRICE, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"ACRES:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 414,\n              columnNumber: 17\n            }, this), \" \", loc.details.ACRES]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 411,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 410,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 409,\n        columnNumber: 11\n      }, this)), filteredPricingData.filter(item => item.type === undefined || item.type === \"pricing\").map((point, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [point.latitude, point.longitude],\n        icon: DotIcon\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 424,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 385,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 314,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"2Qytn5aAt7okDDrKcPIt2+il8uA=\");\n_c3 = App;\nexport default App;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"ZipOverlay\");\n$RefreshReg$(_c2, \"DrawHandler\");\n$RefreshReg$(_c3, \"App\");","map":{"version":3,"names":["React","useState","useRef","useEffect","MapContainer","TileLayer","Marker","Tooltip","useMap","Papa","L","booleanPointInPolygon","point","polygon","XLSX","CustomMarkerIconImage","DotIconImage","jsxDEV","_jsxDEV","CustomMarkerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","DotIcon","ZipOverlay","_s","map","url","fetch","then","res","json","geoData","layer","geoJSON","style","color","weight","fillColor","fillOpacity","onEachFeature","feature","layerInstance","zip","properties","ZCTA5CE10","bindPopup","concat","addTo","catch","err","console","error","_c","DrawHandler","_ref","_s2","pricingData","setFilteredPricingData","locations","setFilteredLocations","isPointInShape","lat","lng","Circle","CircleMarker","center","getLatLng","radius","getRadius","distance","latLng","shapeGeoJSON","toGeoJSON","polygonGeometry","geometry","coordinates","pt","handleShapeDrawn","filteredPricing","filter","p","coords","filteredComps","loc","combinedData","item","type","apn","lotAcreage","latitude","longitude","price","details","PRICE","acres","ACRES","drawnItems","FeatureGroup","addLayer","drawControl","Control","Draw","draw","marker","polyline","circle","shapeOptions","showRadius","circlemarker","showArea","rectangle","edit","featureGroup","addControl","on","e","_c2","App","_s3","setLocations","setPricingData","filteredPricingData","filteredLocations","minAcreage","setMinAcreage","maxAcreage","setMaxAcreage","mapRef","handleMainCSVUpload","event","file","target","files","parse","header","skipEmptyLines","complete","results","parsedData","data","row","parseFloat","LATITUDE","LONGITUDE","handlePricingCSVUpload","applyAcreageFilter","minVal","maxVal","isNaN","filtered","pd","downloadFilteredDataToExcel","length","alert","pricingDataTab","APN","Latitude","Longitude","mainDataTab","Price","Acres","workbook","utils","book_new","pricingSheet","json_to_sheet","mainSheet","book_append_sheet","writeFile","filteredCoords","Set","join","prev","has","height","width","children","position","zIndex","top","right","background","padding","borderRadius","boxShadow","accept","onChange","display","marginBottom","fileName","_jsxFileName","lineNumber","columnNumber","marginTop","value","marginLeft","marginRight","onClick","border","cursor","zoom","ref","attribution","index","direction","offset","permanent","textAlign","undefined","_c3","$RefreshReg$"],"sources":["C:/Users/CREATIVE_SOLUTIONS/Desktop/bolt/bolt codesandbox/src/App.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Tooltip,\n  useMap,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Papa from \"papaparse\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { point, polygon } from \"@turf/helpers\";\nimport * as XLSX from \"xlsx\";\n\n// Custom icons\nimport CustomMarkerIconImage from \"./custom-marker.png\";\nimport DotIconImage from \"./small-dot.png\";\n\nconst CustomMarkerIcon = L.icon({\n  iconUrl: CustomMarkerIconImage,\n  iconSize: [30, 40],\n  iconAnchor: [15, 40],\n  popupAnchor: [0, -40],\n});\n\nconst DotIcon = L.icon({\n  iconUrl: DotIconImage,\n  iconSize: [10, 10],\n  iconAnchor: [5, 5],\n});\n\nfunction ZipOverlay() {\n  const map = useMap();\n\n  useEffect(() => {\n    const url =\n      \"https://raw.githubusercontent.com/OpenDataDE/State-zip-code-GeoJSON/master/pa_pennsylvania_zip_codes_geo.min.json\";\n\n    fetch(url)\n      .then((res) => res.json())\n      .then((geoData) => {\n        const layer = L.geoJSON(geoData, {\n          style: {\n            color: \"#ff7800\",\n            weight: 1,\n            fillColor: \"#ffeda0\",\n            fillOpacity: 0.4,\n          },\n          onEachFeature: (feature, layerInstance) => {\n            const zip = feature.properties.ZCTA5CE10 || \"Unknown ZIP\";\n            layerInstance.bindPopup(`ZIP Code: ${zip}`);\n          },\n        });\n\n        layer.addTo(map);\n        // map.fitBounds(layer.getBounds()); // Optionally auto-zoom to polygons\n      })\n      .catch((err) => {\n        console.error(\"Error fetching ZIP code GeoJSON:\", err);\n      });\n  }, [map]);\n\n  return null;\n}\n\nfunction DrawHandler({\n  pricingData,\n  setFilteredPricingData,\n  locations,\n  setFilteredLocations,\n}) {\n  const map = useMap();\n\n  // Helper function: is point inside the drawn shape?\n  const isPointInShape = (lat, lng, layer) => {\n    // Circle or circleMarker => distance check\n    if (layer instanceof L.Circle || layer instanceof L.CircleMarker) {\n      const center = layer.getLatLng(); // center latLng\n      const radius = layer.getRadius(); // circle radius in meters\n      // Use Leaflet's built-in distance method:\n      const distance = map.distance(center, L.latLng(lat, lng));\n      return distance <= radius;\n    } else {\n      // Polygon or rectangle => use Turf booleanPointInPolygon\n      const shapeGeoJSON = layer.toGeoJSON();\n      const polygonGeometry = polygon(shapeGeoJSON.geometry.coordinates);\n      const pt = point([lng, lat]);\n      return booleanPointInPolygon(pt, polygonGeometry);\n    }\n  };\n\n  // Whenever a shape is drawn, filter points that lie inside it.\n  const handleShapeDrawn = (layer) => {\n    // Filter pricing data\n    const filteredPricing = pricingData.filter((p) => {\n      const [lat, lng] = p.coords;\n      return isPointInShape(lat, lng, layer);\n    });\n\n    // Filter main CSV (comps) data\n    const filteredComps = locations.filter((loc) => {\n      const [lat, lng] = loc.coords;\n      return isPointInShape(lat, lng, layer);\n    });\n\n    // Combine them into one array if you want a single “filtered data” state:\n    const combinedData = [\n      ...filteredPricing.map((item) => ({\n        type: \"pricing\",\n        apn: item.apn,\n        lotAcreage: item.lotAcreage,\n        latitude: item.coords[0],\n        longitude: item.coords[1],\n      })),\n      ...filteredComps.map((item) => ({\n        type: \"comps\",\n        price: item.details.PRICE,\n        acres: item.details.ACRES,\n        latitude: item.coords[0],\n        longitude: item.coords[1],\n      })),\n    ];\n\n    setFilteredPricingData(combinedData);\n\n    // If you want to store filtered comps separately:\n    // setFilteredLocations(filteredComps);\n  };\n\n  useEffect(() => {\n    const drawnItems = new L.FeatureGroup();\n    map.addLayer(drawnItems);\n\n    // Add control once\n    const drawControl = new L.Control.Draw({\n      draw: {\n        marker: false,\n        polyline: false,\n        circle: {\n          shapeOptions: {\n            color: \"#ff0000\",\n          },\n          showRadius: true,\n        },\n        circlemarker: {\n          shapeOptions: {\n            color: \"#ff0000\",\n          },\n        },\n        polygon: {\n          shapeOptions: {\n            color: \"#0000ff\",\n          },\n          showArea: true,\n        },\n        rectangle: {\n          shapeOptions: {\n            color: \"#00ff00\",\n          },\n        },\n      },\n      edit: {\n        featureGroup: drawnItems,\n      },\n    });\n\n    map.addControl(drawControl);\n\n    // When a shape is created, handle it once.\n    map.on(\"draw:created\", (e) => {\n      const { layer } = e;\n      drawnItems.addLayer(layer);\n      handleShapeDrawn(layer);\n    });\n  }, [map, pricingData, locations]);\n\n  return null;\n}\n\nfunction App() {\n  const [locations, setLocations] = useState([]);          // Main CSV\n  const [pricingData, setPricingData] = useState([]);      // Pricing CSV (raw)\n  const [filteredPricingData, setFilteredPricingData] = useState([]); // Combined filtered\n  const [filteredLocations, setFilteredLocations] = useState([]);     // (Optional) filtered comps\n\n  // Acreage filter inputs\n  const [minAcreage, setMinAcreage] = useState(\"\");\n  const [maxAcreage, setMaxAcreage] = useState(\"\");\n\n  const mapRef = useRef(null);\n\n  // Upload main CSV\n  const handleMainCSVUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const parsedData = results.data.map((row) => ({\n          coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n          details: row,\n        }));\n        setLocations(parsedData);\n      },\n    });\n  };\n\n  // Upload pricing CSV\n  const handlePricingCSVUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: function (results) {\n        const parsedData = results.data\n          .filter(\n            (row) =>\n              row[\"LATITUDE\"] &&\n              row[\"LONGITUDE\"] &&\n              row[\"APN - FORMATTED\"]\n          )\n          .map((row) => ({\n            apn: row[\"APN - FORMATTED\"],\n            coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n            lotAcreage: row[\"LOT ACREAGE\"]\n              ? parseFloat(row[\"LOT ACREAGE\"])\n              : null,\n          }));\n\n        setPricingData(parsedData);\n        setFilteredPricingData(parsedData); // By default, show all\n      },\n    });\n  };\n\n  // Apply acreage filter only to pricing data\n  const applyAcreageFilter = () => {\n    const minVal = parseFloat(minAcreage);\n    const maxVal = parseFloat(maxAcreage);\n\n    // If either is not a number, show all\n    if (isNaN(minVal) || isNaN(maxVal)) {\n      setFilteredPricingData(pricingData);\n      return;\n    }\n\n    // Filter by acreage in pricingData\n    const filtered = pricingData.filter((pd) => {\n      if (pd.lotAcreage == null) return false;\n      return pd.lotAcreage >= minVal && pd.lotAcreage <= maxVal;\n    });\n    setFilteredPricingData(filtered);\n  };\n\n  // Download & export to Excel\n  const downloadFilteredDataToExcel = () => {\n    if (filteredPricingData.length === 0) {\n      alert(\"No data points to download.\");\n      return;\n    }\n\n    const pricingDataTab = filteredPricingData\n      .filter((item) => item.type === \"pricing\")\n      .map((item) => ({\n        APN: item.apn,\n        \"LOT ACREAGE\": item.lotAcreage,\n        Latitude: item.latitude,\n        Longitude: item.longitude,\n      }));\n\n    const mainDataTab = filteredPricingData\n      .filter((item) => item.type === \"comps\")\n      .map((item) => ({\n        Price: item.price,\n        Acres: item.acres,\n        Latitude: item.latitude,\n        Longitude: item.longitude,\n      }));\n\n    const workbook = XLSX.utils.book_new();\n    const pricingSheet = XLSX.utils.json_to_sheet(pricingDataTab);\n    const mainSheet = XLSX.utils.json_to_sheet(mainDataTab);\n\n    XLSX.utils.book_append_sheet(workbook, pricingSheet, \"Pricing Data\");\n    XLSX.utils.book_append_sheet(workbook, mainSheet, \"Main Data\");\n\n    XLSX.writeFile(workbook, \"filtered_data.xlsx\");\n\n    // Example of removing downloaded points from map (optional):\n    const filteredCoords = new Set(\n      filteredPricingData.map((item) => [item.latitude, item.longitude].join(\",\"))\n    );\n\n    setLocations((prev) =>\n      prev.filter((loc) => !filteredCoords.has(loc.coords.join(\",\")))\n    );\n    setPricingData((prev) =>\n      prev.filter((pt) => !filteredCoords.has(pt.coords.join(\",\")))\n    );\n\n    // Clear the array so user sees no points after download\n    setFilteredPricingData([]);\n    alert(\"Filtered data downloaded and removed from the map.\");\n  };\n\n  return (\n    <div style={{ height: \"100vh\", width: \"100%\" }}>\n      {/* Control Panel */}\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 1000,\n          top: 10,\n          right: 10,\n          background: \"white\",\n          padding: \"10px\",\n          borderRadius: \"5px\",\n          boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n        }}\n      >\n        <div>\n          <label>\n            Upload Main CSV:{\" \"}\n            <input\n              type=\"file\"\n              accept=\".csv\"\n              onChange={handleMainCSVUpload}\n              style={{ display: \"block\", marginBottom: \"10px\" }}\n            />\n          </label>\n        </div>\n        <div>\n          <label>\n            Upload Pricing CSV:{\" \"}\n            <input\n              type=\"file\"\n              accept=\".csv\"\n              onChange={handlePricingCSVUpload}\n              style={{ display: \"block\", marginBottom: \"10px\" }}\n            />\n          </label>\n        </div>\n        <div style={{ marginTop: \"10px\" }}>\n          <label>Min Acreage:</label>\n          <input\n            type=\"number\"\n            value={minAcreage}\n            onChange={(e) => setMinAcreage(e.target.value)}\n            style={{ width: \"80px\", marginLeft: \"5px\", marginRight: \"10px\" }}\n          />\n          <label>Max Acreage:</label>\n          <input\n            type=\"number\"\n            value={maxAcreage}\n            onChange={(e) => setMaxAcreage(e.target.value)}\n            style={{ width: \"80px\", marginLeft: \"5px\", marginRight: \"10px\" }}\n          />\n          <button onClick={applyAcreageFilter}>Apply Filter</button>\n        </div>\n\n        <button\n          onClick={downloadFilteredDataToExcel}\n          style={{\n            marginTop: \"10px\",\n            padding: \"5px 10px\",\n            background: \"#007bff\",\n            color: \"white\",\n            border: \"none\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n          }}\n        >\n          Download Filtered Data (Excel)\n        </button>\n      </div>\n\n      {/* The Map */}\n      <MapContainer\n        center={[41.2033, -77.1945]}\n        zoom={7}\n        style={{ height: \"100%\", width: \"100%\" }}\n        ref={mapRef}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; OpenStreetMap contributors\"\n        />\n\n        {/* ZIP code overlay */}\n        <ZipOverlay />\n\n        {/* Draw tools */}\n        <DrawHandler\n          pricingData={pricingData}\n          locations={locations}\n          setFilteredPricingData={setFilteredPricingData}\n          setFilteredLocations={setFilteredLocations}\n        />\n\n        {/* Markers from MAIN CSV */}\n        {locations.map((loc, index) => (\n          <Marker key={index} position={loc.coords} icon={CustomMarkerIcon}>\n            <Tooltip direction=\"top\" offset={[0, -10]} permanent>\n              <div style={{ textAlign: \"left\" }}>\n                <strong>PRICE:</strong> {loc.details.PRICE}\n                <br />\n                <strong>ACRES:</strong> {loc.details.ACRES}\n              </div>\n            </Tooltip>\n          </Marker>\n        ))}\n\n        {/* Markers from PRICING CSV (filtered by acreage or otherwise) */}\n        {filteredPricingData\n          .filter((item) => item.type === undefined || item.type === \"pricing\")\n          .map((point, index) => (\n            <Marker\n              key={index}\n              position={[point.latitude, point.longitude]}\n              icon={DotIcon}\n            ></Marker>\n          ))}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}