{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\CREATIVE_SOLUTIONS\\\\Desktop\\\\bolt\\\\bolt codesandbox\\\\src\\\\App.js\",\n  _s = $RefreshSig$(),\n  _s3 = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport { MapContainer, TileLayer, Marker, Tooltip, useMapEvents, useMap } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Papa from \"papaparse\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { point, polygon } from \"@turf/helpers\";\nimport * as XLSX from \"xlsx\"; // For Excel file creation\n\n// Custom icons\nimport CustomMarkerIconImage from \"./custom-marker.png\";\nimport DotIconImage from \"./small-dot.png\";\n\n// Marker icon for Main CSV\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CustomMarkerIcon = L.icon({\n  iconUrl: CustomMarkerIconImage,\n  iconSize: [30, 40],\n  iconAnchor: [15, 40],\n  popupAnchor: [0, -40]\n});\n\n// Dot marker icon for Pricing CSV\nconst DotIcon = L.icon({\n  iconUrl: DotIconImage,\n  iconSize: [10, 10],\n  iconAnchor: [5, 5]\n});\n\n// -------------------------------------------------------------------------\n// Fetches and shows the PA ZIP code polygons\n// -------------------------------------------------------------------------\nfunction ZipOverlay() {\n  _s();\n  const map = useMap();\n  React.useEffect(() => {\n    const url = \"https://raw.githubusercontent.com/OpenDataDE/State-zip-code-GeoJSON/master/pa_pennsylvania_zip_codes_geo.min.json\";\n    fetch(url).then(res => res.json()).then(geoData => {\n      const layer = L.geoJSON(geoData, {\n        style: {\n          color: \"#ff7800\",\n          weight: 1,\n          fillColor: \"#ffeda0\",\n          fillOpacity: 0.4\n        },\n        onEachFeature: (feature, layerInstance) => {\n          const zip = feature.properties.ZCTA5CE10 || \"Unknown ZIP\";\n          layerInstance.bindPopup(\"ZIP Code: \".concat(zip));\n        }\n      });\n      layer.addTo(map);\n      // If you want to auto-zoom to these polygons, uncomment below:\n      // map.fitBounds(layer.getBounds());\n    }).catch(err => {\n      console.error(\"Error fetching ZIP code GeoJSON:\", err);\n    });\n  }, [map]);\n  return null;\n}\n\n// -------------------------------------------------------------------------\n// Main App\n// -------------------------------------------------------------------------\n_s(ZipOverlay, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n  return [useMap];\n});\n_c = ZipOverlay;\nfunction App() {\n  _s3();\n  var _s2 = $RefreshSig$();\n  const [locations, setLocations] = useState([]); // Main CSV\n  const [pricingData, setPricingData] = useState([]); // Pricing CSV\n  const [filteredPricingData, setFilteredPricingData] = useState([]); // Combined\n  const mapRef = useRef(null);\n\n  // --- MAIN CSV UPLOAD ---\n  const handleMainCSVUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        // Filter out invalid lat/lng\n        const parsedData = results.data.filter(row => {\n          const lat = parseFloat(row.LATITUDE);\n          const lng = parseFloat(row.LONGITUDE);\n          return Number.isFinite(lat) && Number.isFinite(lng);\n        }).map(row => ({\n          coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n          details: row\n        }));\n        setLocations(parsedData);\n      }\n    });\n  };\n\n  // --- PRICING CSV UPLOAD ---\n  const handlePricingCSVUpload = event => {\n    const file = event.target.files[0];\n    if (!file) return;\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: results => {\n        // Filter out invalid lat/lng and missing APN - FORMATTED\n        const parsedData = results.data.filter(row => {\n          const lat = parseFloat(row[\"LATITUDE\"]);\n          const lng = parseFloat(row[\"LONGITUDE\"]);\n          return Number.isFinite(lat) && Number.isFinite(lng) && row[\"APN - FORMATTED\"] // or remove this if APN is optional\n          ;\n        }).map(row => ({\n          apn: row[\"APN - FORMATTED\"],\n          coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n          lotAcreage: row[\"LOT ACREAGE\"] ? parseFloat(row[\"LOT ACREAGE\"]) : null\n        }));\n        setPricingData(parsedData);\n        setFilteredPricingData(parsedData); // Show all by default\n      }\n    });\n  };\n\n  // --- DRAW HANDLER COMPONENT ---\n  const DrawHandler = () => {\n    _s2();\n    // Use leaflet's draw events\n    const map = useMapEvents({\n      draw: {\n        created: e => {\n          const layer = e.layer;\n          const drawnShape = layer.toGeoJSON();\n          filterPricingData(drawnShape);\n        }\n      }\n    });\n    React.useEffect(() => {\n      const drawnItems = new L.FeatureGroup();\n      map.addLayer(drawnItems);\n      const drawControl = new L.Control.Draw({\n        draw: {\n          marker: false,\n          polyline: false,\n          circle: {\n            shapeOptions: {\n              color: \"#ff0000\"\n            }\n          },\n          polygon: {\n            shapeOptions: {\n              color: \"#0000ff\"\n            },\n            showArea: true\n          },\n          rectangle: {\n            shapeOptions: {\n              color: \"#00ff00\"\n            }\n          }\n        },\n        edit: {\n          featureGroup: drawnItems\n        }\n      });\n      map.addControl(drawControl);\n      map.on(\"draw:created\", e => {\n        drawnItems.addLayer(e.layer);\n        const drawnShape = e.layer.toGeoJSON();\n        filterPricingData(drawnShape);\n      });\n    }, [map]);\n    return null;\n  };\n\n  // --- FILTER PRICING DATA by drawn shape ---\n  _s2(DrawHandler, \"gWh149/DLPuF22WgXAndVVlzhL4=\", false, function () {\n    return [useMapEvents];\n  });\n  const filterPricingData = shape => {\n    // Convert shape to polygon geometry\n    const polygonGeometry = polygon(shape.geometry.coordinates);\n\n    // Filter pricing data\n    const filteredPricing = pricingData.filter(pt => {\n      const pointGeometry = point([pt.coords[1], pt.coords[0]]);\n      return booleanPointInPolygon(pointGeometry, polygonGeometry);\n    });\n\n    // Filter main CSV (comps) data\n    const filteredLocations = locations.filter(loc => {\n      const pointGeometry = point([loc.coords[1], loc.coords[0]]);\n      return booleanPointInPolygon(pointGeometry, polygonGeometry);\n    });\n\n    // Combine if needed\n    const combinedData = [...filteredPricing.map(item => ({\n      type: \"pricing\",\n      apn: item.apn,\n      lotAcreage: item.lotAcreage,\n      latitude: item.coords[0],\n      longitude: item.coords[1]\n    })), ...filteredLocations.map(item => ({\n      type: \"comps\",\n      price: item.details.PRICE,\n      acres: item.details.ACRES,\n      latitude: item.coords[0],\n      longitude: item.coords[1]\n    }))];\n    setFilteredPricingData(combinedData);\n  };\n\n  // --- DOWNLOAD & EXPORT to Excel ---\n  const downloadFilteredDataToExcel = () => {\n    if (filteredPricingData.length === 0) {\n      alert(\"No data points inside the drawn shape.\");\n      return;\n    }\n\n    // Separate pricing vs main (comps)\n    const pricingDataTab = filteredPricingData.filter(item => item.type === \"pricing\").map(item => ({\n      APN: item.apn,\n      \"LOT ACREAGE\": item.lotAcreage,\n      Latitude: item.latitude,\n      Longitude: item.longitude\n    }));\n    const mainDataTab = filteredPricingData.filter(item => item.type === \"comps\").map(item => ({\n      Price: item.price,\n      Acres: item.acres,\n      Latitude: item.latitude,\n      Longitude: item.longitude\n    }));\n\n    // Create a workbook & write\n    const workbook = XLSX.utils.book_new();\n    const pricingSheet = XLSX.utils.json_to_sheet(pricingDataTab);\n    const mainSheet = XLSX.utils.json_to_sheet(mainDataTab);\n    XLSX.utils.book_append_sheet(workbook, pricingSheet, \"Pricing Data\");\n    XLSX.utils.book_append_sheet(workbook, mainSheet, \"Main Data\");\n    XLSX.writeFile(workbook, \"filtered_data.xlsx\");\n\n    // Remove them from map\n    const filteredCoords = new Set(filteredPricingData.map(item => [item.latitude, item.longitude].join(\",\")));\n    setLocations(prev => prev.filter(loc => !filteredCoords.has(loc.coords.join(\",\"))));\n    setPricingData(prev => prev.filter(pt => !filteredCoords.has(pt.coords.join(\",\"))));\n    setFilteredPricingData([]);\n    alert(\"Filtered data downloaded and removed from the map.\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: \"100vh\",\n      width: \"100%\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"absolute\",\n        zIndex: 1000,\n        top: 10,\n        right: 10,\n        background: \"#fff\",\n        padding: \"10px\",\n        borderRadius: \"5px\",\n        boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n        width: \"250px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        style: {\n          margin: \"5px 0\"\n        },\n        children: \"Data Controls\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: \"block\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Upload Main CSV:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 310,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          onChange: handleMainCSVUpload,\n          style: {\n            display: \"block\",\n            marginTop: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"10px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          style: {\n            display: \"block\"\n          },\n          children: /*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Upload Pricing CSV:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 322,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          accept: \".csv\",\n          onChange: handlePricingCSVUpload,\n          style: {\n            display: \"block\",\n            marginTop: \"5px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: downloadFilteredDataToExcel,\n        style: {\n          marginTop: \"10px\",\n          padding: \"6px 12px\",\n          background: \"#007bff\",\n          color: \"#fff\",\n          border: \"none\",\n          borderRadius: \"3px\",\n          cursor: \"pointer\",\n          width: \"100%\"\n        },\n        children: \"Download Filtered Data (Excel)\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 332,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [41.2033, -77.1945],\n      zoom: 7,\n      style: {\n        height: \"100%\",\n        width: \"100%\"\n      },\n      ref: mapRef,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 OpenStreetMap contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ZipOverlay, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DrawHandler, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 9\n      }, this), locations.map((loc, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: loc.coords,\n        icon: CustomMarkerIcon,\n        children: /*#__PURE__*/_jsxDEV(Tooltip, {\n          direction: \"top\",\n          offset: [0, -10],\n          permanent: true,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"left\"\n            },\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"PRICE:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 376,\n              columnNumber: 17\n            }, this), \" \", loc.details.PRICE, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 377,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"strong\", {\n              children: \"ACRES:\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 378,\n              columnNumber: 17\n            }, this), \" \", loc.details.ACRES]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 11\n      }, this)), pricingData.map((pt, index) => /*#__PURE__*/_jsxDEV(Marker, {\n        position: pt.coords,\n        icon: DotIcon\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 386,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n}\n_s3(App, \"9CQJpmlN8iwDNplPWuOIg9TRitg=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"ZipOverlay\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["React","useState","useRef","MapContainer","TileLayer","Marker","Tooltip","useMapEvents","useMap","Papa","L","booleanPointInPolygon","point","polygon","XLSX","CustomMarkerIconImage","DotIconImage","jsxDEV","_jsxDEV","CustomMarkerIcon","icon","iconUrl","iconSize","iconAnchor","popupAnchor","DotIcon","ZipOverlay","_s","map","useEffect","url","fetch","then","res","json","geoData","layer","geoJSON","style","color","weight","fillColor","fillOpacity","onEachFeature","feature","layerInstance","zip","properties","ZCTA5CE10","bindPopup","concat","addTo","catch","err","console","error","_c","App","_s3","_s2","$RefreshSig$","locations","setLocations","pricingData","setPricingData","filteredPricingData","setFilteredPricingData","mapRef","handleMainCSVUpload","event","file","target","files","parse","header","skipEmptyLines","complete","results","parsedData","data","filter","row","lat","parseFloat","LATITUDE","lng","LONGITUDE","Number","isFinite","coords","details","handlePricingCSVUpload","apn","lotAcreage","DrawHandler","draw","created","e","drawnShape","toGeoJSON","filterPricingData","drawnItems","FeatureGroup","addLayer","drawControl","Control","Draw","marker","polyline","circle","shapeOptions","showArea","rectangle","edit","featureGroup","addControl","on","shape","polygonGeometry","geometry","coordinates","filteredPricing","pt","pointGeometry","filteredLocations","loc","combinedData","item","type","latitude","longitude","price","PRICE","acres","ACRES","downloadFilteredDataToExcel","length","alert","pricingDataTab","APN","Latitude","Longitude","mainDataTab","Price","Acres","workbook","utils","book_new","pricingSheet","json_to_sheet","mainSheet","book_append_sheet","writeFile","filteredCoords","Set","join","prev","has","height","width","children","position","zIndex","top","right","background","padding","borderRadius","boxShadow","margin","fileName","_jsxFileName","lineNumber","columnNumber","marginBottom","display","accept","onChange","marginTop","onClick","border","cursor","center","zoom","ref","attribution","index","direction","offset","permanent","textAlign","_c2","$RefreshReg$"],"sources":["C:/Users/CREATIVE_SOLUTIONS/Desktop/bolt/bolt codesandbox/src/App.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport {\n  MapContainer,\n  TileLayer,\n  Marker,\n  Tooltip,\n  useMapEvents,\n  useMap,\n} from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport Papa from \"papaparse\";\nimport L from \"leaflet\";\nimport \"leaflet-draw/dist/leaflet.draw.css\";\nimport \"leaflet-draw\";\nimport booleanPointInPolygon from \"@turf/boolean-point-in-polygon\";\nimport { point, polygon } from \"@turf/helpers\";\nimport * as XLSX from \"xlsx\"; // For Excel file creation\n\n// Custom icons\nimport CustomMarkerIconImage from \"./custom-marker.png\";\nimport DotIconImage from \"./small-dot.png\";\n\n// Marker icon for Main CSV\nconst CustomMarkerIcon = L.icon({\n  iconUrl: CustomMarkerIconImage,\n  iconSize: [30, 40],\n  iconAnchor: [15, 40],\n  popupAnchor: [0, -40],\n});\n\n// Dot marker icon for Pricing CSV\nconst DotIcon = L.icon({\n  iconUrl: DotIconImage,\n  iconSize: [10, 10],\n  iconAnchor: [5, 5],\n});\n\n// -------------------------------------------------------------------------\n// Fetches and shows the PA ZIP code polygons\n// -------------------------------------------------------------------------\nfunction ZipOverlay() {\n  const map = useMap();\n\n  React.useEffect(() => {\n    const url =\n      \"https://raw.githubusercontent.com/OpenDataDE/State-zip-code-GeoJSON/master/pa_pennsylvania_zip_codes_geo.min.json\";\n    fetch(url)\n      .then((res) => res.json())\n      .then((geoData) => {\n        const layer = L.geoJSON(geoData, {\n          style: {\n            color: \"#ff7800\",\n            weight: 1,\n            fillColor: \"#ffeda0\",\n            fillOpacity: 0.4,\n          },\n          onEachFeature: (feature, layerInstance) => {\n            const zip = feature.properties.ZCTA5CE10 || \"Unknown ZIP\";\n            layerInstance.bindPopup(`ZIP Code: ${zip}`);\n          },\n        });\n        layer.addTo(map);\n        // If you want to auto-zoom to these polygons, uncomment below:\n        // map.fitBounds(layer.getBounds());\n      })\n      .catch((err) => {\n        console.error(\"Error fetching ZIP code GeoJSON:\", err);\n      });\n  }, [map]);\n\n  return null;\n}\n\n// -------------------------------------------------------------------------\n// Main App\n// -------------------------------------------------------------------------\nfunction App() {\n  const [locations, setLocations] = useState([]);          // Main CSV\n  const [pricingData, setPricingData] = useState([]);      // Pricing CSV\n  const [filteredPricingData, setFilteredPricingData] = useState([]); // Combined\n  const mapRef = useRef(null);\n\n  // --- MAIN CSV UPLOAD ---\n  const handleMainCSVUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (results) => {\n        // Filter out invalid lat/lng\n        const parsedData = results.data\n          .filter((row) => {\n            const lat = parseFloat(row.LATITUDE);\n            const lng = parseFloat(row.LONGITUDE);\n            return Number.isFinite(lat) && Number.isFinite(lng);\n          })\n          .map((row) => ({\n            coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n            details: row,\n          }));\n\n        setLocations(parsedData);\n      },\n    });\n  };\n\n  // --- PRICING CSV UPLOAD ---\n  const handlePricingCSVUpload = (event) => {\n    const file = event.target.files[0];\n    if (!file) return;\n\n    Papa.parse(file, {\n      header: true,\n      skipEmptyLines: true,\n      complete: (results) => {\n        // Filter out invalid lat/lng and missing APN - FORMATTED\n        const parsedData = results.data\n          .filter((row) => {\n            const lat = parseFloat(row[\"LATITUDE\"]);\n            const lng = parseFloat(row[\"LONGITUDE\"]);\n            return (\n              Number.isFinite(lat) &&\n              Number.isFinite(lng) &&\n              row[\"APN - FORMATTED\"] // or remove this if APN is optional\n            );\n          })\n          .map((row) => ({\n            apn: row[\"APN - FORMATTED\"],\n            coords: [parseFloat(row.LATITUDE), parseFloat(row.LONGITUDE)],\n            lotAcreage: row[\"LOT ACREAGE\"]\n              ? parseFloat(row[\"LOT ACREAGE\"])\n              : null,\n          }));\n\n        setPricingData(parsedData);\n        setFilteredPricingData(parsedData); // Show all by default\n      },\n    });\n  };\n\n  // --- DRAW HANDLER COMPONENT ---\n  const DrawHandler = () => {\n    // Use leaflet's draw events\n    const map = useMapEvents({\n      draw: {\n        created: (e) => {\n          const layer = e.layer;\n          const drawnShape = layer.toGeoJSON();\n          filterPricingData(drawnShape);\n        },\n      },\n    });\n\n    React.useEffect(() => {\n      const drawnItems = new L.FeatureGroup();\n      map.addLayer(drawnItems);\n\n      const drawControl = new L.Control.Draw({\n        draw: {\n          marker: false,\n          polyline: false,\n          circle: {\n            shapeOptions: {\n              color: \"#ff0000\",\n            },\n          },\n          polygon: {\n            shapeOptions: {\n              color: \"#0000ff\",\n            },\n            showArea: true,\n          },\n          rectangle: {\n            shapeOptions: {\n              color: \"#00ff00\",\n            },\n          },\n        },\n        edit: {\n          featureGroup: drawnItems,\n        },\n      });\n\n      map.addControl(drawControl);\n\n      map.on(\"draw:created\", (e) => {\n        drawnItems.addLayer(e.layer);\n        const drawnShape = e.layer.toGeoJSON();\n        filterPricingData(drawnShape);\n      });\n    }, [map]);\n\n    return null;\n  };\n\n  // --- FILTER PRICING DATA by drawn shape ---\n  const filterPricingData = (shape) => {\n    // Convert shape to polygon geometry\n    const polygonGeometry = polygon(shape.geometry.coordinates);\n\n    // Filter pricing data\n    const filteredPricing = pricingData.filter((pt) => {\n      const pointGeometry = point([pt.coords[1], pt.coords[0]]);\n      return booleanPointInPolygon(pointGeometry, polygonGeometry);\n    });\n\n    // Filter main CSV (comps) data\n    const filteredLocations = locations.filter((loc) => {\n      const pointGeometry = point([loc.coords[1], loc.coords[0]]);\n      return booleanPointInPolygon(pointGeometry, polygonGeometry);\n    });\n\n    // Combine if needed\n    const combinedData = [\n      ...filteredPricing.map((item) => ({\n        type: \"pricing\",\n        apn: item.apn,\n        lotAcreage: item.lotAcreage,\n        latitude: item.coords[0],\n        longitude: item.coords[1],\n      })),\n      ...filteredLocations.map((item) => ({\n        type: \"comps\",\n        price: item.details.PRICE,\n        acres: item.details.ACRES,\n        latitude: item.coords[0],\n        longitude: item.coords[1],\n      })),\n    ];\n\n    setFilteredPricingData(combinedData);\n  };\n\n  // --- DOWNLOAD & EXPORT to Excel ---\n  const downloadFilteredDataToExcel = () => {\n    if (filteredPricingData.length === 0) {\n      alert(\"No data points inside the drawn shape.\");\n      return;\n    }\n\n    // Separate pricing vs main (comps)\n    const pricingDataTab = filteredPricingData\n      .filter((item) => item.type === \"pricing\")\n      .map((item) => ({\n        APN: item.apn,\n        \"LOT ACREAGE\": item.lotAcreage,\n        Latitude: item.latitude,\n        Longitude: item.longitude,\n      }));\n\n    const mainDataTab = filteredPricingData\n      .filter((item) => item.type === \"comps\")\n      .map((item) => ({\n        Price: item.price,\n        Acres: item.acres,\n        Latitude: item.latitude,\n        Longitude: item.longitude,\n      }));\n\n    // Create a workbook & write\n    const workbook = XLSX.utils.book_new();\n    const pricingSheet = XLSX.utils.json_to_sheet(pricingDataTab);\n    const mainSheet = XLSX.utils.json_to_sheet(mainDataTab);\n\n    XLSX.utils.book_append_sheet(workbook, pricingSheet, \"Pricing Data\");\n    XLSX.utils.book_append_sheet(workbook, mainSheet, \"Main Data\");\n\n    XLSX.writeFile(workbook, \"filtered_data.xlsx\");\n\n    // Remove them from map\n    const filteredCoords = new Set(\n      filteredPricingData.map((item) =>\n        [item.latitude, item.longitude].join(\",\")\n      )\n    );\n\n    setLocations((prev) =>\n      prev.filter((loc) => !filteredCoords.has(loc.coords.join(\",\")))\n    );\n\n    setPricingData((prev) =>\n      prev.filter((pt) => !filteredCoords.has(pt.coords.join(\",\")))\n    );\n\n    setFilteredPricingData([]);\n    alert(\"Filtered data downloaded and removed from the map.\");\n  };\n\n  return (\n    <div style={{ height: \"100vh\", width: \"100%\" }}>\n      {/* Control Panel */}\n      <div\n        style={{\n          position: \"absolute\",\n          zIndex: 1000,\n          top: 10,\n          right: 10,\n          background: \"#fff\",\n          padding: \"10px\",\n          borderRadius: \"5px\",\n          boxShadow: \"0 2px 5px rgba(0,0,0,0.2)\",\n          width: \"250px\",\n        }}\n      >\n        <h4 style={{ margin: \"5px 0\" }}>Data Controls</h4>\n        <div style={{ marginBottom: \"10px\" }}>\n          <label style={{ display: \"block\" }}>\n            <strong>Upload Main CSV:</strong>\n          </label>\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handleMainCSVUpload}\n            style={{ display: \"block\", marginTop: \"5px\" }}\n          />\n        </div>\n\n        <div style={{ marginBottom: \"10px\" }}>\n          <label style={{ display: \"block\" }}>\n            <strong>Upload Pricing CSV:</strong>\n          </label>\n          <input\n            type=\"file\"\n            accept=\".csv\"\n            onChange={handlePricingCSVUpload}\n            style={{ display: \"block\", marginTop: \"5px\" }}\n          />\n        </div>\n\n        <button\n          onClick={downloadFilteredDataToExcel}\n          style={{\n            marginTop: \"10px\",\n            padding: \"6px 12px\",\n            background: \"#007bff\",\n            color: \"#fff\",\n            border: \"none\",\n            borderRadius: \"3px\",\n            cursor: \"pointer\",\n            width: \"100%\",\n          }}\n        >\n          Download Filtered Data (Excel)\n        </button>\n      </div>\n\n      {/* The Map */}\n      <MapContainer\n        center={[41.2033, -77.1945]}\n        zoom={7}\n        style={{ height: \"100%\", width: \"100%\" }}\n        ref={mapRef}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution=\"&copy; OpenStreetMap contributors\"\n        />\n\n        {/* ZIP code overlay */}\n        <ZipOverlay />\n\n        {/* Leaflet.Draw handler */}\n        <DrawHandler />\n\n        {/* Markers from Main CSV */}\n        {locations.map((loc, index) => (\n          <Marker key={index} position={loc.coords} icon={CustomMarkerIcon}>\n            {/* \n              If you want tooltip on hover, remove \"permanent\" prop:\n              <Tooltip direction=\"top\" offset={[0, -10]}>\n            */}\n            <Tooltip direction=\"top\" offset={[0, -10]} permanent>\n              <div style={{ textAlign: \"left\" }}>\n                <strong>PRICE:</strong> {loc.details.PRICE}\n                <br />\n                <strong>ACRES:</strong> {loc.details.ACRES}\n              </div>\n            </Tooltip>\n          </Marker>\n        ))}\n\n        {/* Markers from Pricing CSV */}\n        {pricingData.map((pt, index) => (\n          <Marker key={index} position={pt.coords} icon={DotIcon} />\n        ))}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}